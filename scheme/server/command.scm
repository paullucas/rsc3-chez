;; command.scm - (c) rohan drape, 2005

;; Descriptors for SuperCollider server commands.

(define supercollider-commands
  `((/quit        /done        ()                                      #f)
    (/notify      /done        (code)                                  #f)
    (/status      status.reply ()                                      #f)
    (/dumpOSC     #f           (code)                                  #f)
    (/sync        /synced      (id)                                    #f)
    (/clearSched  #f           ()                                      #f)
    (/d_recv      /done        (data)                                  #f)
    (/d_load      /done        (path)                                  #f)
    (/d_loadDir   /done        (path)                                  #f)
    (/d_free      #f           (name)                                  #f)
    (/n_free      #f           (id)                                    #f)
    (/n_run       #f           (id flag)                               #f)
    (/n_set       #f           (id index value)                        #f)
    (/n_setn      #f           (id index n)                        values)
    (/n_fill      #f           (id index n value)                      #f)
    (/n_map       #f           (id index bus)                          #f)
    (/n_mapn      #f           (id index bus n)                        #f)
    (/n_before    #f           (a b)                                   #f)
    (/n_query     /n_info      (id)                                    #f)
    (/n_trace     #f           (id)                                    #f)
    (/s_new       #f           (name id action target)         initialize)
    (/s_get       /n_set       (id index)                              #f)
    (/s_getn      /n_setn      (id index n)                            #f)
    (/s_noid      #f           (id)                                    #f)
    (/g_new       #f           (id action target)                      #f)
    (/g_head      #f           (group node)                            #f)
    (/g_tail      #f           (group node)                            #f)
    (/g_freeAll   #f           (id)                                    #f)
    (/g_deepFree  #f           (id)                                    #f)
    (/b_alloc     /done        (id frames channels)                    #f)
    (/b_allocRead /done        (id path frame n)                       #f)
    (/b_read      /done        (id path frame n bframe flag)           #f)
    (/b_write     /done        (id path header type frames start flag) #f)
    (/b_free      /done        (id)                                    #f)
    (/b_zero      /done        (id)                                    #f)
    (/b_set       #f           (id index value)                        #f)
    (/b_setn      #f           (id index n)                        values)
    (/b_fill      #f           (id index n value)                      #f)
    (/b_close     #f           (id)                                    #f)
    (/b_query     /b_info      (id)                                    #f)
    (/b_get       /b_set       (id index)                              #f)
    (/b_getn      /b_setn      (id index n)                            #f)
    (/c_set       #f           (id value)                              #f)
    (/c_setn      #f           (id n)                              values)
    (/c_fill      #f           (id n value)                            #f)
    (/c_get       /c_set       (id)                                    #f)
    (/c_getn      /c_setn      (id n)                                  #f)
    ))

;; Command procedures, generated.  Async comands return (list return
;; message), sync commands return message.

#|
(require (lib "pretty.ss"))
(pretty-print-columns 180)
(pretty-print
 (map 
  (lambdaL ((list c r a v))
    (let ((f symbol->string))
      (if v
	  `(define (,c ,@a . ,v)
	     ,(if r
		  `(list ,(f r) 
			 (++ (list ,(f c) ,@a) ,v))
		  `(++ (list ,(f c) ,@a) ,v)))
	  `(define (,c ,@a)
	     ,(if r
		  `(list ,(f r) (list ,(f c) ,@a))
		  `(list ,(f c) ,@a))))))
  supercollider-commands))
|#

(define (/quit) (list "/done" (list "/quit")))
(define (/notify code) (list "/done" (list "/notify" code)))
(define (/status) (list "status.reply" (list "/status")))
(define (/dumpOSC code) (list "/dumpOSC" code))
(define (/sync id) (list "/synced" (list "/sync" id)))
(define (/clearSched) (list "/clearSched"))
(define (/d_recv data) (list "/done" (list "/d_recv" data)))
(define (/d_load path) (list "/done" (list "/d_load" path)))
(define (/d_loadDir path) (list "/done" (list "/d_loadDir" path)))
(define (/d_free name) (list "/d_free" name))
(define (/n_free id) (list "/n_free" id))
(define (/n_run id flag) (list "/n_run" id flag))
(define (/n_set id index value) (list "/n_set" id index value))
(define (/n_setn id index n . values) (++ (list "/n_setn" id index n) values))
(define (/n_fill id index n value) (list "/n_fill" id index n value))
(define (/n_map id index bus) (list "/n_map" id index bus))
(define (/n_mapn id index bus n) (list "/n_mapn" id index bus n))
(define (/n_before a b) (list "/n_before" a b))
(define (/n_query id) (list "/n_info" (list "/n_query" id)))
(define (/n_trace id) (list "/n_trace" id))
(define (/s_new name id action target . initialize) (++ (list "/s_new" name id action target) initialize))
(define (/s_get id index) (list "/n_set" (list "/s_get" id index)))
(define (/s_getn id index n) (list "/n_setn" (list "/s_getn" id index n)))
(define (/s_noid id) (list "/s_noid" id))
(define (/g_new id action target) (list "/g_new" id action target))
(define (/g_head group node) (list "/g_head" group node))
(define (/g_tail group node) (list "/g_tail" group node))
(define (/g_freeAll id) (list "/g_freeAll" id))
(define (/g_deepFree id) (list "/g_deepFree" id))
(define (/b_alloc id frames channels) (list "/done" (list "/b_alloc" id frames channels)))
(define (/b_allocRead id path frame n) (list "/done" (list "/b_allocRead" id path frame n)))
(define (/b_read id path frame n bframe flag) (list "/done" (list "/b_read" id path frame n bframe flag)))
(define (/b_write id path header type frames start flag) (list "/done" (list "/b_write" id path header type frames start flag)))
(define (/b_free id) (list "/done" (list "/b_free" id)))
(define (/b_zero id) (list "/done" (list "/b_zero" id)))
(define (/b_set id index value) (list "/b_set" id index value))
(define (/b_setn id index n . values) (++ (list "/b_setn" id index n) values))
(define (/b_fill id index n value) (list "/b_fill" id index n value))
(define (/b_close id) (list "/done" (list "/b_close" id)))
(define (/b_query id) (list "/b_info" (list "/b_query" id)))
(define (/b_get id index) (list "/b_set" (list "/b_get" id index)))
(define (/b_getn id index n) (list "/b_setn" (list "/b_getn" id index n)))
(define (/b_gen id cmd . values) (list "/done" (++ (list "/b_gen" id cmd) values)))
(define (/c_set id value) (list "/c_set" id value))
(define (/c_setn id n . values) (++ (list "/c_setn" id n) values))
(define (/c_fill id n value) (list "/c_fill" id n value))
(define (/c_get id) (list "/c_set" (list "/c_get" id)))
(define (/c_getn id n) (list "/c_setn" (list "/c_getn" id n)))

;; Variants with simpler syntax.

(define (/b_setn* id n l) (apply /b_setn id n (length l) l))
(define (/c_setn* n l) (apply /c_setn n (length l) l))
(define (/b_gen* id cmd . l) (apply /b_gen id cmd (splice l)))

;; Local Variables:
;; truncate-lines:t
;; End:            
