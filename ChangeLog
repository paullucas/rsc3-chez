2006-01-03  Rohan Drape  <rohan@alice.localdomain>

	* scheme/ugen/constructor.scm: Change UGen rate specification,
	delete specialized constructors with sclang like dotted suffixes,
	and instead use named rate identifiers.  That is SinOsc.ar is now
	written SinOsc AR.

2005-10-11  Rohan Drape  <rohan@giacomo.local>

	* scheme/ugen/operator.scm: Create file, implement aliases for
	binary math operators (ie. *, +, /, -, %, <, >, <=, >=).

2005-09-24  Rohan Drape  <rd@slavepianos.org>

	* scheme/server/server.scm: Make timeout for ->< not +inf.0.

2005-09-18  Rohan Drape  <rd@slavepianos.org>

	* scheme/uspec/uspec.scm: Make <uspec> a structure, not a list.
	Related changes to sc.scm.

2005-09-06  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/spec.scm: Rename from control-spec to spec
	and simplify.  Make alternate constructor make-spec*.

2005-09-03  Rohan Drape  <rd@slavepianos.org>

	* scheme/server/server.scm: Delete boot procedure and
	server-options functions - moved to tn-42.  There are still issues
	about -> and if the message should be a <u8v> or a <list>, <-
	returns a <list>.

2005-09-02  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/score.scm: Delete explicit file writes -
	leave to user.  Instead implement ->u8v-> functions.

2005-08-30  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/synthdef.scm: The synthdef syntax is
	rewritten to take only two arguments, the name and the root of the
	graph, users must type letc to get controls.

2005-08-30  Rohan Drape  <rd@slavepianos.org>

	* scheme/ugen/graph.scm: Rewrite to be properly functional.  The
	hidden fields at <ugen> are deleted and equal? is has proper
	meaning at graphdef elements.

2005-08-17  Rohan Drape  <rd@slavepianos.org>

	* scheme/server/server.scm: Discard queued incoming packets before
	sending at -><.  This is *a* solution to the problem of queued
	failure packets.  Implement <- and <-* for retrieving incoming
	messages.

	* scheme/uspec/compile.scm: Many readability fixes - should be
	functionally equivalent.  Also work on module separation - see
	brief notes added to README.   

2005-08-16  Rohan Drape  <rohan@giacomo.local>

	* scheme/buffer/signal.scm: Rewrite using mapw and mapw*.

2005-08-15  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/command.scm: Create file and implement
	procedures for commands.

	* scheme/supercollider/server.scm: Delete 'current-server'
	parameter.  This caused issues with scheduling threads, and was
	ugly - still this will break a *lot* of code.  In tree fixes made.

2005-08-14  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/server.scm: Delete <server> structure and
	simplify all server interaction.  This will break some clients.
	Users of ->, => and ->< will be fine.

2005-08-09  Rohan Drape  <rohan@giacomo.local>

	* help/UGens/Chaos/LorenzL.help.scm: Add help files for some Chaos
	UGens.

2005-08-08  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/uspec-sc3.scm: Fix error in TWindex USpec,
	the 'normalize' argument was omitted, being stolen from the first
	value of the 'array' argument.

2005-08-02  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/uspec-sc3.scm: Various additions from SC3
	sources.  Issues were noted during work on sw-62 which generates
	UGen variants using the sclang class hierachy.

2005-06-29  Rohan Drape  <rd@slavepianos.org>

	* emacs/rsc.el: Delete font locking for unary and binary
	operators.  If you want them locked use explicit rate variants.
	Add .gr to rate specializer list.

2005-06-27  Rohan Drape  <rd@slavepianos.org>

	* scheme/supercollider/uspec-sc3.scm: Delete initial underscores
	at math UGens.

	* scheme/supercollider/uspec-math.scm: Obsolete, the USpecs are
	now stored and the constructors are comments.

2005-06-15  Rohan Drape  <rohan@henri.localdomain>

	* scheme/supercollider/uspec-sc3.scm: Replace previous file with
	named procedures copied from ugen-procedures.scm, from which they
	are deleted.

	* rsc.ss: Move base components to rscB (sw-60) and the OSC
	implementation to rscO (sw-61).  Provide all imported definitions
	from there, so that requiring rsc has the same result as
	previously.

2005-06-06  Rohan Drape  <rohan@henri.localdomain>

	* scheme/supercollider/uspec-compile.scm: Rewrite to generate
	cleaner definitions.  The non-specialized for is generated at
	NAME.xr from NAME.uspec and specialized forms follow from that.
	The file size has reduced from 264k to 130k.  The uspec data is
	still duplicated, it could be localized by making the initial
	definitions of the form NAME.uspec.

2005-06-04  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/error.scm: Delete file, use SRFI-34, definition is
	moved to srfi.scm.

2005-05-28  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/srfi.scm: The semantics of 'all-from-except' must
	have change for 299.106.  The change is somehow compatible under
	299.101.

2005-05-25  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/lambdaL.scm: Extend letL and defineH so that defineH
	can be used in all cases where define is ordinarily used.

2005-05-21  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/lambdaL.scm: Implement lambdaH, which is a composite
	of lambdaL and lambdaC.  H is for Haskell.

2005-05-18  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/signal.scm: Create file.  Osc.ar requires
	buffers in a 'wavetable' format.  Provide converters to and form
	ordinary signals.

2005-05-04  Rohan Drape  <rohan@giacomo.local>

	* rsc.ss: Complete cleanout and reorganisation.  All 'areas' are
	now modules, declared at 'scheme/module/area.ss'.  All
	interdependencies are worked out and resolved [for example
	identifier is moved from math to collection as it requires vector
	functions].  All dependent packages are tested and compile.  All
	removed files are stored at sw-55.

2005-05-03  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/structure.scm: Delete define-structure*.

	* scheme/core/function.scm: Rewrite defineK to require default
	values and to *not* unquote them.  This simplifies implementation
	and removes dependence on define-macro.  Implement defineV which
	replaces define-structure*.

2005-05-02  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/keyword.scm: Rename file and do not make rsc depend
	upon this.  Interested users should require the module.

	* scheme/generic/random.scm: Rename to avoid conflict with
	mzscheme builtin random, which cannot be renamed in a module.  The
	workaround was worse than the disease.

2005-05-01  Rohan Drape  <rohan@giacomo.local>

	* scheme/protocol/ctl.scm: Delete file and related files, move to
	sw-54.

2005-04-27  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/procedure.scm: Rename define-procedure to defineK to
	be like defineL and defineS.  Also make-procedure to lambdaK.  K
	is for keyword.  Other general re-naming to be consistent about
	use of '/' in names.  

2005-04-26  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/match.scm: Implement let/l and let/s.  These
	replace all internal uses of match/l and match/s which are
	deprecated.

	* scheme/core/procedure.scm: Implement lambda/s and define/s and
	change implementation of lambda/l and define/l to allow multiple
	arguments.

2005-04-23  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/server.scm: Simplify implementation.
	Delete all but buffer resource id generators.  

2005-04-22  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/trace.scm: Delete <trace-pt> type and use
	<pt3> instead.

	* scheme/collection/pt3.scm: Rename file and data type from
	<point> to <pt3>.

2005-04-20  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/synthdef.scm: Fix play to support
	<output-proxy> lists.

2005-04-18  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/uspec-math.scm: Change prefix for operator
	rate suffixed UGen constructors from "Op" to "_".  This better
	reflects that these names are *not* in user space.

2005-04-17  Rohan Drape  <rohan@giacomo.local>

	* scheme/schedule/schedule.scm: Re-implement to use mzscheme
	primitives only as suggested by Matthew Flatt on the PLT list.
	Ie. not the high-precision-time extension which is moved to sw-52.
	Unresolved issues: accuracy, UTC time on non-unix
	platforms (current-inexact-millisecons/utc), startup,
	initialization, relation to tschedule, aliases...

2005-04-12  Rohan Drape  <rohan@giacomo.local>

	* scheme/math/combinatorics.scm: Add multi-set subset enumerators.
	The naming scheme for this library needs thought through properly
	and all operations named consistently.

2005-04-10  Rohan Drape  <rohan@giacomo.local>

	* scheme/math/combinatorics.scm: Implement compositions and
	multi-set operations.

2005-04-09  Rohan Drape  <rohan@giacomo.local>

	* scheme/math/combinatorics.scm: Implement 'restricted growth'
	functions and set partition functions.

2005-04-05  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/procedure.scm: Implement lambda/l and define/l.

	* scheme/collection/list.scm: Delete map/sidechain, replace
	singular use with unfold and lambda/l.

2005-04-03  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/list.scm: Implement list-permute and
	list-partition.

	* scheme/collection/vector.scm: Implement vector-permute!.

	* scheme/math/series.scm: Implement permutation-n/seq and
	permutation-n.

2005-04-01  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/uspec-compile.scm: Fix recently introduced
	error where inputs were not being rewritten.

	* scheme/make-tags.sh: Edit to use r.tags script.  This is because
	having split rsc into parts it is now neccesary to have multiple
	TAGS files, and the build rules should be shared.

2005-03-22  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/uspec-compile.scm: Edit uspec-compile to
	also generate 'UGen.uspec' to give the <uspec> for UGen.  This
	replaces the uspec-table code, which is deleted.

	* scheme/supercollider/ugen-graph.scm: To clarify, this should be
	documented properly: <constant> values are made using
	'with-control-set' which binds _closed_ <control> values.  The
	ugen close assumes <control> values are closed, that graph closing
	does not introduce further ugens or constants.

	* scheme/supercollider/uspec-table.scm: Delete file.  This is a
	holdover from when Uspecs were compiled to s-expressions at rsc
	startup and 'eval'ed.

2005-03-10  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/argument.scm: Much simplified implementation.  No
	longer support &rest arguments.  There is now proper error
	reporting (ie. with title of procedure where failure occured, see
	procedure.scm).

2005-03-09  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/ugen-graph.scm: Complete changes to UGen
	graph implementation.  The <builddef> value type is deleted.  The
	with-controls syntax is deleted.

2005-03-07  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/ugen.scm: Further changes to
	implementation.  <builddef> is used only for generating indices
	for <control> values.

2005-03-06  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/control.scm: Move control-set operations
	from builddef.scm to here.

	* scheme/supercollider/ugen.scm: Implement ugen-antecedents and
	ugen-graph-ordering and multiple-root-ugen-graph-ordering.

	* scheme/supercollider/uspec-compile.scm: Delete all references to
	<builddef> from UGen generators.  The value was used to resolve
	constant indexes and to commit UGen values, neither of which are
	required.

2005-03-05  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/patterns.scm: Fix error in Pbind.

	* scheme/supercollider/input.scm: Move resolve-input from
	make-input-list at builddef.

2005-03-03  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/byte.scm: Add aliases for IO routines.

	* scheme/protocol/osc-write.scm: Delete osc variants of write
	procedures at core/byte.scm.  Also for read and encode and decode
	variants.

	* scheme/protocol/sdif.scm: Delete file.  Move SDIF support to
	separate project at sw-50.

2005-02-23  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/equal.scm: create file and implement predicate
	generators for various equality tests.

2005-02-22  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/random.scm: Rewrite to accomodate changes noyed
	below.

	* scheme/host/random-taus88.scm: Delete file and all associated
	uses.  This is moved to a separate project (sw-49).

	* scheme/core/boolean.scm: Create file and implement true and
	false as aliases.

	* scheme/collection/match.scm: Create file and implement match/l
	and match/s for matching lists and structures.

2005-02-16  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/trace.scm: Change trace-point to trace-pt and
	simplify implementation.  This should be generalized properly, at
	least to arbitrary dimensioned real number vectors but possibly to
	arbitrary time stamped values.  This would be a separate type,
	perhaps a 'tvalue' for temporal-value.

	* rsc.ss: Make module run rsc-startup when 'required'.

	* emacs/rsc.el: Edit rsc-make-interpreter-command to not set
	rsc-directory and to not call rsc-startup (this is done in the
	module definition).

	* scheme/rsc/startup.scm: Edit so that rsc-directory is set by
	rsc-initialize using rsc-locate-directory which is rewritten to
	use the PLT collection-path procedure.  This allows for DrScheme
	to be useable as an environment.

2005-02-12  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/stream-srfi.scm: Add file.  This is a draft
	submission for SRFI-40 with many of the library procedures later
	defered to SRFI-41.  

	* scheme/core/integer.scm: Implement integer-wrap as in
	SuperCollider.

	* scheme/collection/list.scm: Implement list-length*. Edit
	list-expand-all to use list-length*.

	* scheme/supercollider/patterns.scm: Create file and implement
	various patterns as defined in SuperCollider.

	* scheme/core/integer.scm: Add integer infinities.

2005-02-09  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/vector.scm: Move all SRFI-43 procedures to top
	of file and comment out.  Add inclusion for SRFI-43, again this is
	not in PLT as yet.

	* scheme/collection/stream.scm: Revoke yesterdays changes.  The
	final version of SRFI-40 has errors and even with fixes is slower
	than the local implementation.

2005-02-08  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/stream.scm: Comment out all procedures defined
	by SRFI-40.  These are not deleted as these are not in PLT yet.
	
2005-02-04  Rohan Drape  <rohan@henri.localdomain>

	* scheme/math/interpolation.scm: Create file, implement
	cubic-interpolation.

2005-02-02  Rohan Drape  <rohan@henri.localdomain>

	* scheme/supercollider/server-send.scm: Delete unnesary use of
	define-procedure.

2005-01-30  Rohan Drape  <rohan@henri.localdomain>

	* scheme/host/structure.scm: Add abbreviation for make-type at
	Type.  This implies that all types have lower case names, which is
	true of rsc.

	* scheme/collection/point.scm: Create file, move implementation
	from math/geometry.scm which is deleted.  Various fixes and
	deletions.

2005-01-29  Rohan Drape  <rohan@giacomo.local>

	* rsc.ss: Move sound-file extension to separate project (sw-48).

	* scheme/time/time-ntp.scm: Rename utc procedures to not have
	-real suffix.  Rename inexact variants with . instead of * suffix.

	* scheme/math/constants.scm: Add 2^32 and 2^32. constants.

	* scheme/rsc/startup.scm: Implement rsc-user-halt to simplify
	rsc.el.  This needs clarification.  Working towards using DrScheme
	interface in a straightforward way.

2005-01-27  Rohan Drape  <rohan@giacomo.local>

	* scheme/schedule/at.scm: Make tempo mutation keyword tempo!.
	Make pulse keyword require utc argument.  Add time keyword.

	* scheme/error/inform.scm: Stop inform from inserting a colon.

2005-01-26  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/color.scm: Delete integer based colors.  Use [0,1]
	for all colors.

2005-01-23  Rohan Drape  <rohan@giacomo.local>

	* help/Examples/EX-22.scm: Edit to use @* in place of
	in-mthread/after.  Reorganize to allow playing without building
	instruments (ie. if they are already made).

	* scheme/supercollider/score.scm: Fix score-play to use
	<tschedule> not after.

	* help/Examples/EX-46.scm: Fix daft error in UGen graph and make
	scheduling sample accurate.

	* scheme/schedule/at.scm: Add @* as routine based interface.  The
	implementation and design are preliminary.  In particular the
	handling of time and pulse information within the routine.

	* scheme/core/routine.scm: Rewrite to generate unique type,
	<routine>.

2005-01-16  Rohan Drape  <rohan@giacomo.local>

	* scheme/math/resource-id.scm: Delete unused generator variant.

	* scheme/supercollider/server-identifier.scm: Clarify interfaces.

	* scheme/math/resource-id.scm: Implement resource-id-previous.

	* scheme/schedule/tschedule.scm: Add lock mechanism.  At present
	the locking is restricted to set-tempo operations.  Implement
	new-tschedule.

	* scheme/schedule/at.scm: Create file.  This syntax replaces the
	generic version, which required either quoting keywords or using
	the colon-suffix form, which looks odd for no argument keywords.

	* scheme/protocol/controller.scm: Delete deprecated use of 'c'
	syntax.  Rename controller-at to controller-ref.

2005-01-15  Rohan Drape  <rohan@giacomo.local>

	* scheme/generic/method.scm: Rewrite type->predicate as
	process-method-qualifier.  This makes the generic system properly
	predicate based (ie. it allows the qualifier to be an actual
	predicate, or a value for direct comparison).

	* scheme/host/read-syntax.scm: Delete <type> reading as it not
	neccesary and complicated to get right.

	* scheme/host/read-syntax.scm: Rename from keyword.scm.  Extend to
	read <type> as type?.  This simplifies the generic system and
	makes the core/type.scm file redundant.

2005-01-12  Rohan Drape  <rohan@alice.localdomain>

	* scheme/supercollider/buffer.scm: Delete <buffer> type and use
	<integer> as identifier.

2005-01-08  Rohan Drape  <rohan@alice.localdomain>

	* scheme/schedule/schedule.scm: Implement utc alias.

2005-01-06  Rohan Drape  <rohan@alice.localdomain>

	* scheme/collection/squeue.scm: Edit to execute procedures in an
	error handler context.

2005-01-05  Rohan Drape  <rohan@alice.localdomain>

	* scheme/generic/at.scm: Rewrite to have a core variant, '@' is
	the user level thread local schedule, '_@' is the system schedule.

	* help/Examples/EX-11.scm: Rewrite in terms of the system
	schedule, accessed using '_@'.

	* scheme/generic/at.scm: Create file and implement scheduling
	primitives as aliases to tschedule.  This is the proper user
	scheduling service.

	* scheme/schedule/tschedule.scm: Implement tschedule-circular-at.

2005-01-03  Rohan Drape  <rohan@alice.localdomain>

	* scheme/supercollider/server-send.scm: Rename from -delta to
	-after, drop -absolute suffix as that is the ordinary case.  This
	is consistent with the scheduling names.  Reassign => and =>*
	aliases, the absolute form should be the normal form since it is
	the only way to do accurate scheduling.  Incorporate latency into
	basic bundle sends.  Delete server-send procedure.

2005-01-01  Rohan Drape  <rohan@alice.localdomain>

	* scheme/rsc/startup.scm: Edit rsc-startup to start schedule after
	loading dot-rsc.

2004-12-21  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/high-precision-time-core.c: Add a call to
	scheme_signal_received in set_timer_dispatch.  This fixes the
	scheduling errors under MrEd/OSX.  Courtesy of Matthew Flatt.
	There is a post on the plt-scheme list suggesting two alternate
	implementations for this.

2004-12-14  Rohan Drape  <rohan@giacomo.local>

	* scheme/protocol/osc-transport.scm: Edit osc-request to use
	osc-receiver.

	* scheme/protocol/osc-responder.scm: Delete <network-address> and
	UTC time from responder design.

	* scheme/protocol/osc-receiver.scm: Delete <network-address> and
	UTC time from receiver design.  These were included to mirror the
	SC implementation but I have never used them.

2004-12-12  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/control-spec.scm: Rename file and rename
	type.  This is to be in proper accord with the SC3 name.

	* scheme/collection/vector.scm: Rename vector-fetch to
	vector-find, which is the appropriate name.

	* scheme/protocol/controller.scm: Implement ctl-update! by
	installing a single OSC receiver monitoring /c_set.  This makes
	the update non-synchronous.

	* scheme/protocol/ctl.scm: Add keyword arguments to ctl-setup!.

	* scheme/protocol/controller.scm: Implement 'c' syntax and delete
	all other accessor deferals and aliases.

2004-12-08  Rohan Drape  <rohan@giacomo.local>

	* scheme/generic/comparison.scm: Add neccesary define-generic
	declarations.

	* scheme/generic/method.scm: Create file.  Clarify implementation
	and split generic.scm into two files.  Delete support for defining
	a default method at define-generic.

2004-12-05  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/server-boot.scm: Edit to run server-connect
	 and create default group on boot.

	* emacs/rsc.el: Accomodate changes to server-boot.

	* scheme/supercollider/server.scm: Add support for default
	group at node one.

	* scheme/supercollider/dot.scm: Draw control inputs in a
	trapezium not a diamond.

	* scheme/protocol/ctl.scm: Edit to reqire a <spec> not a warp
	procedure.

	* scheme/supercollider/spec.scm: Create file.  This provides an
	inteface to the warp procedures similar to the SC3 Spec class.

	* scheme/math/math.scm: Rename constrain-within to number-clip and
	move to core/number.scm.

2004-12-03  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection: Change all -for-each and -map procedures to
	have the same argument ordering (that is as in R5RS for-each and
	map).  This will break code, but it was impossible to remember
	ordering variations.  All in tree uses fixed.

	* scheme/protocol/controller.scm: Implement c as shorthand alias
	for controller.

	* emacs/rsc.el: Edit font locking to only lock map variants with a
	one word prefix.  This stops ctl-pre-map from locking.

2004-12-02  Rohan Drape  <rohan@giacomo.local>

	* scheme/protocol/ctl.scm: Edits to clean up naming schema.  What
	was called 'post-map' is now called 'value'.  The controller
	variants are now all simple deferals to correctly implemented
	variants at <ctl>.  Modifying the value now modifies the
	state (ie. the relation is symetric).  There is an efficiency
	cost, if the state is not used the depth should be set to one.
	The receiver now gets the spec and the value, not the pre-map and
	post-map.
	
	* scheme/protocol/osc-receiver.scm: Reimplement to use a table
	instead of a list.  Store singular predicate that takes two
	arguments, the address and the command.  Implement 'osc-wait'.

2004-11-27  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/high-precision-time-core.c: Edit accuracy log to
	take zero or one argument.

2004-11-24  Rohan Drape  <rohan@giacomo.local>

	* scheme/midi/midi-receiver.scm: Edit midi-receiver-dispatch to
	fix argument order error introduced when changing from a list to a
	table data structure.  The table-for-each interface should use the
	normal for-each argument ordering.

	* scheme/collection/u8vector.scm: Create file.  The <byte-string>
	type is deleted and the SRFI-4 <u8vector> type is used in it's
	place.  All in-tree uses are updated, but this will affect RSC
	clients.

	* scheme/core/byte.scm: Implement read- and write- forms for sized
	network-order integers and reals.

	* scheme/collection/table.scm: Delete mtable support and replace
	singular in-tree use.

	* scheme/core/argument.scm: Create file and move argument rewriter
	move procedure.scm to here.

	* scheme/core/real.scm: Create file and move <real> operations
	from math.scm.  Rename <real> variants from using * suffix to
	using . suffix (as in ML).

	* scheme/protocol/sdif.scm: Rename byte-string variants of all
	SDIF operations to use a start suffix.  This makes it all more
	readable.

	* scheme/collection/byte-string.scm: Edit read-byte-string and
	write-byte-string to use correct u8vector read and write
	operations.  This is required since the changes to the PLT
	<string> value mean that byte-size and string-length are not
	necessarily the same.  This fixes the errors noted for
	synthdef-store.

	* scheme/file/file.scm: Edit file->byte-string to use
	read-byte-string.

	* emacs/rsc.el: Delete support for load sequence startup.

	* scheme/math/integer.scm: Create file.  Move integer iteration
	from generic file to this file.

	* scheme/host/syntax.scm: This file is deleted.

	* scheme/rsc/main.scm: This file is deleted.

	* scheme/rsc/implementation.scm: This file is deleted.

	* scheme/rsc/compile.scm: Delete procedures that generated the
	rsc.ss file, it is no longer a generated file.

	* rsc.ss: Make this file not a generated file.  RSC no longer
	supports a load sequence, it is extra work to maintain and is not
	used.

	* emacs/rsc.el: Add font lock code for *-map and *-for-each forms.

	* scheme/collection/list.scm: Add aliases for R5RS and SRFI list
	operations that do not have a list prefix.  Use these names
	internally.  In the long term there should be generics forms for
	most of these operations.

2004-11-22  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/high-precision-time-core.c: Major edits.  Internally
	calculations use <double> UTC values.  The accuracy log data is
	returned as a <list>.

2004-11-19  Rohan Drape  <rohan@giacomo.local>

	* scheme/midi/midi-receiver.scm: Edit to use a <table> for the
	global data store and add initializer.

	* README: Clarify PLT comments.

	* scheme/supercollider/buffer-shared.scm: Create file.  Move and
	rename ftable implementation.  The procedure buffer-acquire
	returns a <buffer> value.

2004-11-17  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/score.scm: Edit to use UTC time stamps with
	the OSC protocol layer.

	* scheme/supercollider/server-send.scm: Edit to use UTC time
	stamps with the OSC protocol layer.

	* scheme/protocol/osc-read.scm: Edit read and encode forms to use
	<real> valued UTC timestamps.  This is the time format used at the
	scheduled, not the <integer> NTP timestamps formerly used here.
	This is a basic change and will effect any client that was
	directly using the OSC transport layer.  Clients using the server
	or score layers are not affected.

2004-11-13  Rohan Drape  <rohan@giacomo.local>

	* emacs/rsc.el: Edit rsc-see-listener to move point to end of
	buffer and show point .

	* scheme/schedule/schedule.scm: Fix type introdued during
	renaming, a call to schedule-at was written to schedule-after, and
	was recursing.

	* scheme/core/syntax.scm: Delete seq* syntax.  This case can be
	handled by writing a duple at the name position for the ordinary
	seq construct.  This is implemented.  push! is moved to
	list-push!.

	* scheme/schedule/schedule.scm: Rename -delta to -after and
	-absolute to -at.  Rename for tschedule and mschedule also.

	* scheme/time/time-ntp.scm: Edit to have correct interfaces.  Edit
	test file to be more helpful.

	* scheme/file/file.scm: Implement file-verify-dependenices.

	* scheme/supercollider/synthdef.scm: Delete initializer, set
	default directory to a static string.

	* scheme/schedule/schedule.scm: Edit to have a cleaner
	implementation and to delete redundant aliases.

	* scheme/schedule/repeater.scm: Remove file.

	* scheme/supercollider/dot.scm: Delete initializer.  The default
	viewer and directory are static values.

	* scheme/protocol/osc-encode.scm: Edit semantics so that the
	elements of a lisp bundle must be lisp messages.

	* scheme/protocol/osc-decode.scm: Initial edits to simplify
	interface.

2004-11-12  Rohan Drape  <rohan@giacomo.local>

	* scheme/protocol/osc-read.scm: Fix typo in osc-read-timetag.

	* scheme/protocol/open-sound-control.scm: Partition into encode,
	decode, write and read files.

	* scheme/supercollider/server-current.scm: Implement
	set-server-latency!.

	* scheme/supercollider/score.scm: Edit to use byte-string-write.

2004-11-11  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/server-send.scm: Rename ->* to ->< which is
	a better picture and does not conflict with the =>* naming.

	* scheme/rsc/implementation.scm: The pitch operations are removed
	and are now at sw-45.  Also the note protocol.

2004-11-09  Rohan Drape  <rohan@giacomo.local>

	* scheme/network/network.scm: Implement network-address-host-name
	and network-address-display.

	* scheme/protocol/ctl.scm: Edit to use implicit current-server
	value.

	* scheme/midi/midi-client.scm: Edit to use new naming scheme at
	midi.osc.

2004-11-08  Rohan Drape  <rohan@giacomo.local>

	* help/Examples/EX-36.scm: Move example to jack.scope help
	directory and obsolete this file.

2004-11-05  Rohan Drape  <rohan@alice.localdomain>

	* scheme/protocol/osc-receiver.scm: Edit osc-receiver-register to
	include a <network-address> filter, that is to have the same for
	as the responder.

2004-11-04  Rohan Drape  <rohan@alice.localdomain>

	* help/ServerCommands/status.help.scm: Create file.

	* scheme/supercollider/server-current.scm: Access and mutate
	procedures for the current server.  It should be possible to write
	a 'define-structure' variant that sets all of this up
	automatically.

	* scheme/supercollider/server.scm: Major set of changes to make
	the server value implicit in all cases.  To communicate with
	multiple servers requires using multiple threads.

	* scheme/protocol/osc-transport.scm: Implement osc-send-message
	and osc-send-bundle.

	* scheme/supercollider/server-identifier.scm: Add non-reserving
	variants.

	* scheme/supercollider/server-send.scm: Rename server-send+wait to
	server-request.

	* scheme/supercollider/synthdef.scm: Edit synthdef-play to not
	require the <node> system.

	* scheme/supercollider/server.scm: Edit to use
	resolve-network-address.

	* scheme/protocol/osc-transport.scm: Edit to use new interface
	below.  Edit to actually use the time-out value.

	* scheme/host/udp.scm: Various edits that ended being somewhat
	circular.  Renamed interface and made <network-address> based.
	More efficient incoming message dispatch.  Equivalent changes at
	tcp.scm.
	
	* scheme/network/network.scm: Implement resolve-network-address.

	* help/Examples/EX-36.scm: Edit to use <osc-transport> and to
	conform to current controller design.

2004-11-03  Rohan Drape  <rohan@giacomo.local>

	* scheme/core/name.scm: Edit to use string-capitalize, add dot
	test case.  This is for transforming unix-file-names.ext to
	AppleFileNames.ext.

	* scheme/collection/string.scm: Implement string-capitalize.
	SRFI-13 has only string-titlecase.

	* scheme/host/file.scm: Implement directory-contents which returns
	a <list> of <string> values.

	* scheme/file/directory.scm: Rename directory-list operations to
	directory-contents.

	* scheme/host/posix.scm: Edit to coerce <path> value to <string>.

	* scheme/file/directory.scm: Edit to coerce <path> value to
	<string>.  This should be pushed to host and the naming cleared
	up.  Either that or the <path> type 'exported' to RSC.

	* scheme/core/name.scm: Add capitalize-initial? option to
	lisp-name->small-talk-name.

2004-10-30  Rohan Drape  <rohan@giacomo.local>

	* scheme/protocol/ctl.scm: Edit to have localized constructor with
	provided default values.  Change implementation and semantics of
	the recv value, it is now a <set>.  The semantics make more sense
	this way.

2004-10-30  Rohan Drape  <rohan@alice.localdomain>

	* scheme/math/resource-id.scm: Edit generic allocator to dispatch
	on the type of the request, <integer> frees, 'reserve reserves.

2004-10-28  Rohan Drape  <rohan@alice.localdomain>

	* emacs/rsc.el: Delete rsc-visit-rtf.  The sclang-help-mode adds
	itself as the open mode for RTF files, so this is redundant.  Use
	'find-file' instead.

2004-10-27  Rohan Drape  <rohan@alice.localdomain>

	* scheme/midi/midi-port.scm: Create file and copy procedures, to
	read and write midi events to and from a port, from the deprecated
	character-device file.

	* scheme/protocol/controller.scm: Add type assertion to
	controller-initialize as the resulting error is painful to locate.

	* scheme/protocol/ctl.scm: Add third argument to list delete,
	it is not properly an alias at present.

	* scheme/midi/midi-client.scm: Edit to use the <osc-transport>
	mechanism.

	* scheme/rsc/compile.scm: PLT 299 is case sensitive by default.
	Make allowed changes.

	* scheme/host/udp.scm: Changes to support changes at PLT 299.2.
	The address passing has gotten more out of hand.

	* scheme/host/srfi.scm: Edit to replace u8vector procedures that
	do not exist in 299.2.

	* scheme/host/machine-representation.scm: Implemeny
	bytes->u8vector and inverse.  Document requirements for change due
	to changes in 299.2.

	* scheme/host/sound-file-core.c: Add BYTE_ prefix to _STR
	macros. This is required for 299.2.

	* scheme/host/string.scm: Create file.  The write-string procedure
	is now standard in PLT from 299.2.  Delete that procedure from the
	collection area and create this file to documentit as a
	requirement.

2004-10-26  Rohan Drape  <rohan@alice.localdomain>

	* scheme/math/resource-id.scm: Implement resource-id-next to allow
	allocator to be used in situations where some long lived entities
	are reserved and other short lived entities are cycled through in
	the expectation that there are enough resources available.  This
	allows for long lived clients to reserve an ID and never release
	it, and for short lived clients to just take and ID with no
	responsibility to release it.  Should write a detailed note on
	this design.
	
	* scheme/core/color.scm: Implement rgbi->yuvi.

2004-10-24  Rohan Drape  <rohan@alice.localhost>

	* scheme/supercollider/server-send.scm: Edit server-send+wait to
	use osc-request.

	* scheme/supercollider/server-connect.scm: Edit to use
	osc-transport.

	* scheme/protocol/osc-transport.scm: Create file and implement
	interface.  This replaces the <packet-engine> system.  The
	receiver is not specified, all packets are sent to the OSC
	dispatch system.  The osc-request procedure uses the logic that
	was at <server>.
	
	* scheme/supercollider/server-send.scm: Edit to use osc-transport.

2004-10-24  Rohan Drape  <rohan@alice.localdomain>

	* scheme/core/name.scm: Create file and implement
	lisp-name->small-talk-name.  This is incomplete, as demonstrated
	in the test file.

2004-10-23  Rohan Drape  <rohan@alice.localdomain>

	* scheme/host/.cvsignore: Same changes as below.

	* .cvsignore: Delete the ignores for auto* files.  Add compiled
	and delete .cvsignore files below there.  The correct policy is
	that the entire compiled directory is ignored, we never care about
	anything there, it is all autogenerated.

	* scheme/rsc/compile.scm: Reorganize so that the RSI can use the
	module constructor.  Some further minor fixes.

2004-10-21  Rohan Drape  <rohan@alice.localdomain>

	* scheme/core/type.scm: Implement type-identifier.

2004-10-17  Rohan Drape  <rohan@alice.localdomain>

	* scheme/core/character.scm: Implement char->symbol.

	* scheme/core/symbol.scm: Implement quoted-symbol?.

	* scheme/collection/list.scm: Implement list-singleton?.

2004-10-10  Rohan Drape  <rohan@spike.local>

	* scheme/collection/set.scm: Create file.  This should provide,
	initially, basic insertion and iteration.

2004-10-09  Rohan Drape  <rohan@spike.local>

	* scheme/protocol/controller.scm: Change setup semantics to
	reflect those at sw-37, ie. do not clear receiver list on setup,
	and do not allow receiver registration.

	* scheme/protocol/ctl.scm: Create file and move implementation of
	<ctl> values from controller.scm.

	* scheme/rsc/implementation.scm: Add ctl.scm to list.

	* scheme/protocol/controller.scm: Name and some implementation
	changes as a result of work done on the <Ctl> and <Controller>
	objects at sw-37.  Delete 'offset' support, this was never a good
	idea.

2004-10-06  Rohan Drape  <rohan@spike.local>

	* scheme/host/export.scm: Add SRFI-4 to export list.

	* scheme/collection/byte-string.scm: Edit machine representation
	procedures to use host variants that operate on single byte
	integers.
	
	* scheme/host/machine-representation.scm: Implement variants that
	operate on one-byte integers.  

	* scheme/protocol/sdif-data-type.scm: Extend to include one and
	type byte signed and unsigned integers.  These types are used by
	IRCAM.

	* scheme/host/alsa-sequencer-core.c: This file, and all associated
	files, are deprecated and will be removed.  The code has been made
	independant of RSC and moved to sw-39.  RSC now uses midi.osc for
	real-time MIDI IO.

	* installer.ss: Delete alsa-sequencer from list of extensions to
	make.

	* scheme/collection/string.scm: Implement conversion to and from
	SRFI-4 <u8vector>.

	* scheme/host/byte-string.scm: This file is deprecated and will be
	removed.  The implementation is now in terms of the SRFI-4
	<u8vector> type, and resides at collection.  The machine
	representation procedures have been renamed and moved to a new
	file, see below.

	* scheme/collection/byte-string.scm: Create file.  Move all
	abstract procedures from host to collection.

	* scheme/host/machine-representation.scm: Create file.  Move this
	aspect of the host/byte-string.scm file to this file.  Renamed to
	operate on <u8vector>.

2004-10-05  Rohan Drape  <rohan@spike.local>

	* help/ServerCommands/g_freeAll.help.scm: Create file, also for
	other group commands.

	* help/ServerCommands/g_new.help.scm: Create and copy
	documentation.

2004-10-03  Rohan Drape  <rohan@spike.local>

	* scheme/host/byte-string.scm: Implement byte-string-copy! as
	analogue to string-copy!, without source indexes.

	* scheme/protocol/sdif-matrix.scm: Implement sdif-matrix-encode to
	encode a lisp <sdif-matrix> object as a <byte-string>.

	* scheme/protocol/sdif-data-type.scm: Implement
	sdif-data-type-encoder.  This is the basic requirement for being
	able to write SDIF data structures to a byte stream.

2004-10-02  Rohan Drape  <rohan@spike.local>

	* scheme/protocol/sdif-frame.scm: Implement sdif-frame-for-each.

	* scheme/protocol/sdif-data-type.scm: Add sdif-data-type-string.
	Do not raise errors for unknown data types, these are allowed and
	supported by the standard.

2004-10-01  Rohan Drape  <rohan@spike.local>

	* scheme/host/byte-string.scm: Replace completely inefficient
	implementation o byte-substring with proper implementation.  Other
	procedures should be fixed as required.  Required for SDIF code.

	* scheme/rsc/implementation.scm: Add sdif-frame.scm,
	sdif-matrix.scm and sdif-data-type.scm from protocol to the list
	of implementation files.

	* scheme/protocol/sdif-frame.scm: Create file and move SDIF frame
	related operations here.  Implement <sdif-frame> type.

	* scheme/protocol/sdif-display.scm: Edits as required by core SDIF
	changes.

2004-09-30  Rohan Drape  <rohan@spike.local>

	* scheme/protocol/sdif.scm: Add <sdif> type and rename operations
	that act on <byte-string> data appropriately.  The new type caches
	frame index data which allows for a *much* more efficient
	implementation.  This change prompted by reading FFT analysis
	files generated using AudioSculpt.

	* scheme/protocol/sdif-data-type.scm: Create file.  Move data type
	related operations to this file.

	* scheme/protocol/sdif-file.scm: Changes as required by edits to
	SDIF core.  New matrix-index argument.

	* scheme/host/export.scm: Create file.  Move all 'provide' forms
	at host to this file.  The provide forms are required when RSC is
	loaded as a module, but are illegal when RSC is loaded in a load
	sequence.  The load sequence is much more useful when working on
	code that lies within RSC.

	* scheme/rsc/compile.scm: Add host/export.scm to rsc-module, but
	not to implementation files list.

	* scheme/midi/midi-client.scm: Create file and implement standard
	interface to the midi.osc MIDI server.  This replaces the
	midi-character-device and the ALSA sequencer extension layers and
	the midi-engine abstraction over them.

	* scheme/protocol/controller.scm: Edit dispatch to use
	server-connected? to determine whether to message the server.

	* scheme/rsc/implementation.scm: Add midi/midi-client.scm and
	delete midi-character-device.scm and midi-engine.scm.

	* scheme/core/byte.scm: Move read-byte and write-byte to host
	area, as noted below.

	* scheme/host/byte-string.scm: Add read-, peek- and write-byte
	procedures (these are improved on the previous implementations).
	Also variants for SRFI-6.

	* scheme/midi/midi-file.scm: Fixes to be clearer about
	<byte-string> use.

2004-09-24  Rohan Drape  <rohan@spike.local>

	* scheme/host/tcp.scm: Fixes here and also at udp.scm to handle
	proper typing of <byte-string>s.

	* scheme/generic/as.scm: Add as-graphdef method for <byte-string>.

	* scheme/protocol/open-sound-control.scm: Make fixes required by
	changes to the <byte-string> implementation.  In particular delete
	heuristic for determing string category.
	
	* scheme/host/byte-string.scm: Move implementation to SRFI-4,
	ie. to a u8vector.  This allows OSC blobs to be recognized
	correctly without flaky heuristics.  Change some interface
	details, in particular drop the storage argument to the machine
	representation procedures, these now all allocate storage.

	* scheme/collection/string.scm: Implement string->integer-vector
	and inverse.

2004-09-16  Rohan Drape  <rohan@alice.localdomain>

	* scheme/protocol/sdif.scm: Significant documentation fixes and
	code rewrite.

2004-09-05  Rohan Drape  <rohan@alice.localdomain>

	* scheme/time/time.scm: Change time-interval->minutes+seconds to
	return a duple not a pair.

2004-09-03  Rohan Drape  <rohan@alice.localdomain>

	* scheme/host/sound-file-core.c: Fix error in sound_file_header.
	The frame count was divided by the channel count, this was an
	artifact of old libsndfile behaviour.

2004-08-28  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/score.scm: Rename score-render-file to
	score-render.  Implement score-render-osc-file.

	* scheme/file/file-name.scm: Implement file-name-change-extension.

2004-08-27  Rohan Drape  <rohan@giacomo.local>

	* scheme/collection/list.scm: Implement list-repeat.

	* scheme/supercollider/synthdef.scm: Edit synthdef-send to check
	if the server is booted before initiating the load.

	* scheme/supercollider/score.scm: Fix score-play to use a managed
	thread.

	* scheme/midi/midi-time.scm: Fix absurd errors in time conversion
	code between tick delta and seconds .  Rename procedures for
	dealing with upq values (usecs per quarter note).
	
	* scheme/midi/midi-constants.scm: Add further seven-bit controller
	names and also some fourteen bit controller names.

2004-08-26  Rohan Drape  <rohan@giacomo.local>

	* scheme/midi/midi-event.scm: Add META event predicates and some
	encoder and decoder procedures.

	* scheme/midi/midi-time.scm: Add accessor procedures for parsing
	the DIVISION value stored in MIDI files.  Use these procedures in
	the conversion routines between DELTA values and SECONDS.

	* scheme/midi/midi-file.scm: Rename midi-file-parse to
	midi-file-read, this is in keeping with other naming conventions.
	Fix only in tree use (at kenton.scm).  Add read-file and
	write-file variants.  Add accessors for lisp representation.

	* scheme/core/byte.scm: Implement the two procedures
	'bytes-required-to-encode-[un]signed-integer'.  Also
	'integer->bit-pattern' and inverse and 'byte-list->integer' and
	inverse.

2004-08-25  Rohan Drape  <rohan@giacomo.local>

	* scheme/rsc/implementation.scm: Add score.scm to file list.

	* scheme/supercollider/score.scm: Create file and implement read,
	write, play and render procedures for OSC scores.  The binary file
	format is that supported by SC3, each bundle is preceded by an
	integer size value.

	* scheme/time/time-ntp.scm: Add time interval conversion
	procedures.

	* scheme/file/file.scm: Add call-with-output-file*.

	* scheme/host/posix.scm: Exclude call-with-output-file*, RSC has a
	conventional use for that name.

2004-08-04  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/uspec.scm: Extend to allow optional 'RATES'
	specifier.  This defaults to the list (0 1 2).  

	* scheme/supercollider/uspec-math.scm: Demand rate related fixes.

	* emacs/rsc.el: Demand rate related fixes.

	* scheme/supercollider/dot.scm: Demand rate related fixes.

	* scheme/supercollider/ugen.scm: Fix ugen-user-name to recognize
	.dr.

	* scheme/supercollider/uspec-compile.scm: Fix compiler to work
	with Demand rate UGens.

	* scheme/supercollider/ugen-math.scm: Add lisp level procedures
	for MIDIRatio and inverse.

	* scheme/math/math.scm: Add log2 basic operation, and also various
	SC3 constants.

	* help/UGens/Controls/Demand.help.scm: Create file.  Translate
	initial examples from SC3.

	* scheme/collection/list.scm: Add list-mirror and variants, names
	courtesy SC3.

	* scheme/supercollider/uspec-sc3.scm: Add Demand rate UGens.  Set
	default lag for Mouse UGens to 0.2.
	
	* help/Examples/EX-42.sc: Delete contents and mark as obsolete.

	* emacs/rsc.el: Expand name before returning from
	locate-plt-library.  This fixes C-cC-t under OSX which broke if
	the rsc-shared-directory included ~ and white-space.

	* scheme/supercollider/server-status.scm: Create file.  This moves
	the formatter from the server-window file, which is not available
	from the base RSC module.  Implement 'server-print-status' to
	print a line detailing the server status to the current output
	port.

	* scheme/rsc/compile.scm: Add 'provide' clause for 'keyword.scm'.
	This seems to be neccessary.

	* help/Examples/EX-52.scm: Create file and translate example.

2004-07-31  Rohan Drape  <rohan@giacomo.local>

	* emacs/rsc.el: Implement locate-plt-library and delete prior
	find-shared-directory.  This searches known PLT locations for
	Linux and MacOSX.  Delete rsc-query-directory-location.

2004-07-28  Rohan Drape  <rohan@giacomo.local>

	* emacs/rsc.el: Implement rsc-query-directory-location.

	* scheme/rsc/startup.scm: Implement rsc-locate-directory.  This
	finds the RSC directory along the PLT collects path.

	* scheme/host/posix.scm: Change as below.  Similar changes to
	other files as needed.

	* scheme/host/macro.scm: Edit provide the form as well as
	requiring it.  This is neccesary so that users who require the RSC
	module, now the default and recommended way of working, get the
	definition also.

	* Makefile: Re-write rules use setup-plt and mzc only.  This file
	is redundant for normal distributions, but useful for non
	installed (symbolic link) setups.

	* installer.ss: Move rsc-compile-extension and variant to this
	file and edit to compile from this location.  Write
	rsc-intall-emacs-mode to install the rsc.el file during setup.

	* info.ss: Create file.  This allows setup-plt to work to compile
	and install RSC.

	* rsc.ss: Change the compiler to write this file to this location.

2004-07-27  Rohan Drape  <rohan@giacomo.local>

	* scheme/rsc/compile.scm: Implement rsc-compile-rsc-module and
	rsc-verify-rsc-module.  This makes using the module system more or
	less safe, and load times are much reduced.  However in tree
	changes are best made while using the traditional load system.
	
	* emacs/rsc.el: Modify rsc-make-interpreter-command to use -M form
	for module loading.

2004-07-19  Rohan Drape  <rohan@giacomo.local>

	* scheme/rsc.ss: This file now works and is added to the CVS
	repository.

	* scheme/rsc/compile.scm: Add fix supplied by Felix Klock to make
	the include version be case sensitive.  Since this works delete
	the catenate form.

2004-07-18  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/uspec.scm: Write clearer documentation and
	add named accesors for USpec components.

	* scheme/supercollider/uspec-compile.scm: Implement
	uspec->sc3-class-definition.  

2004-07-17  Rohan Drape  <rohan@giacomo.local>

	* scheme/host/core-midi-core.c: Create file and edit
	alsa-sequencer template.  This will need to work differently.  The
	alsa version should probably be fixed to user the same callback
	model for input.

2004-07-17  Rohan Drape  <rohan@henri.localdomain>

	* emacs/rsc.el: Fix definition of rsc-interpreter.

2004-07-17  Rohan Drape  <rohan@giacomo.local>

	* scheme/rsc/compile.scm: Add rsc-make-rcs-module-include and
	abstract rsc-make-rsc-module-common.  Old compiler is now
	rsc-make-rcs-module-catenate.

2004-07-16  Rohan Drape  <rohan@giacomo.local>

	* emacs/rsc.el: Delete 'rsc-set-interpreter' and add move to the
	defvar initializer.  Delete 'rsc-find-shared-directory' and move
	to defvar initializer.  Add 'rsc-use-module' to select between
	load sequence and module startup.  Isolate expand-file-name to
	'find-shared-directory'.

	* Makefile: Create file.  Compilation and installation will be
	written in scheme and managed from this file.  Delete all autoconf
	files: autogen.sh, configure.ac, Makefile.am, NEWS, AUTHORS,
	INSTALL.  This file currently has rules to make the C extensions
	and to install the emacs file.

2004-07-16  Rohan Drape  <rohan@henri.localdomain>

	* scheme/rsc/implementation.scm: Delete host/xml.scm,
	protocol/sxml.scm and protocol/ardour.scm.  These files are moved
	to sw-06 and made independant of RSC.  This was done so that RSC
	does not require the sxml and ssax PLT packages.

2004-07-15  Rohan Drape  <rohan@giacomo.local>

	* scheme/supercollider/server-boot.scm: Add server-plugin-path and
	server-synthdef-path parameters.  Under OSX Emacs is started from
	the Finder and does not collect Environment variables without a
	fair degree of hassle.  RSC puts the values of these parameters,
	if not #f, to the enironment before starting scsynth.

	* scheme/supercollider/dot.scm: Fix ugen-label to not write <IN_#>
	for ports with constant values.  The OSX graphviz erroneously
	draws these in the label.

	* scheme/rsc/compile.scm: Fix to write rsc.ss to correct location.

	* scheme/make-tags.sh: Under FC2 this is etags.emacs, under OSX it
	is etags.  Add switch to select.

	* help/Examples/EX-51.scm: Create file with translation of the
	instrument from the first Streams-Patterns-Events help file in
	SC3.

	* scheme/pitch/pitch.scm: Add make-pitch constructor.

	* scheme/supercollider/server-boot.scm: Add server-command-name
	parameter so that it can be set under OSX (where scsynth is likely
	not on PATH).

	* scheme/supercollider/synthdef-declare.scm: Add documentation to
	with-controls on argument order and defaults.

2004-07-12  Rohan Drape  <rohan@henri.localdomain>

	* scheme/pitch/diatonic-pitch-class.scm: Add named accessors.

2004-07-01  Rohan Drape  <rohan@henri.localdomain>

	* scheme: The rsc.ss module that is autogenerated is now
	functional, there is a commented out line in rsc.el which uses
	that, and the compiled variant if available.

	* scheme/supercollider/ugen-compiler.scm: Create file and
	integrate all UGen procedure compilation and verification.

	* Makefile.am: Fix compilation rule at install-data-local.

	* scheme/rsc/compile.sh: Commit to CVS then delete since
	compile.scm is fixed.

	* scheme/rsc/compile.scm: Add neccesary require and provide forms
	to rsc-make-rcs-module.  Fix extension compiler to work with new
	file layout.

	* scheme/host/load.scm: Delete load-extension requirement, it was
	wrong headed.  All extensions are moved to `host'.

	* scheme/host/alsa-sequencer-core.c: Add correct module support.

	* scheme/rsc/compile.sh: Reinstate file and fix to compile to
	correct subdirectory.  

	* scheme/math/random-taus88-core.c: Add correct module support.

	* scheme/midi/midi-general-midi.scm: Fix error in list nesting.

	* scheme/core/color.scm: Fix error in hsv-inverse.

	* scheme/host/srfi.scm: Alias used SRFI-1 renaming.

	* scheme/host/keyword.scm: Add renaming from random to
	base-random-32bit.

	* scheme/generic/as.scm: Fix error in as-graphdef.

	* scheme/rsc/implementation.scm: Add controller-interface.scm to
	list of interface files.

	* scheme/protocol/controller-interface.scm: Move interface
	component from controller.scm to this separate file.

	* scheme/supercollider/ugen-math.scm: Fix to use random-boolean
	for Coin and bitwise-ior for BitOr.

	* scheme/rsc/implementation.scm: Move server-window.scm from base
	to interface file set.

	* scheme/supercollider/synth.scm: Partially fix error in
	synth-noid.

	* scheme/supercollider/node.scm: Fix error in node-before and
	node-after.

	* scheme/supercollider/graphdef.scm: Fix error in
	graphdef-display.

	* scheme/rsc/compile.scm: Make module generated by
	rsc-make-rcs-module be case sensitive.

	* scheme/rsc/main.scm: Move the file that was at '../rsc.scm' to
	this location.  Fix relative file locations.

	* scheme/rsc/implementation.scm: Fix use procedures to be invoked
	from this directory, not the parent.

	* scheme/supercollider/server-window.scm: Add Nominal and Actual
	SR values to format-server-status.  Resize window at
	server-window.

2004-06-30  Rohan Drape  <rohan@henri.localdomain>

	* scheme/generic/random.scm: There is an issue with using the name
	random: under the module system this must be 'define-generic*',
	under the load system it must be 'define-generic'.

	* scheme/protocol/sound-file-core.scm: Create file.

	* scheme/midi/alsa-sequencer-core.scm: Create file.

	* scheme/rsc/compile.scm: Fixes for naming and implementation
	changes at all C level extensions.

	* scheme/time/high-precision-time-core.scm: Create file.

	* scheme/protocol/note.scm: Fix use of non-existant note-list-sort.

	* scheme/pitch/diatonic-key.scm: Implement normal-diatonic-key.

	* scheme/collection/trace.scm: Delete trace draw.

	* scheme/interface/tracer.scm: Move trace draw to the interface file.

	* scheme/midi/midi-character-device.scm: Fix wrong constant name
	in midi-character-device:recv.

	* scheme/midi/midi-time.scm: Fix errors in smpte procedures.

	* scheme/protocol/open-sound-control.scm: Fix error in
	osc-read-bytes.

	* scheme/supercollider/buffer.scm: Fix error in buffer-query.

	* scheme/rsc/initialize.scm: Fixes for naming and implementation
	changes at all C level extensions.

	* emacs/rsc.el: Fix startup to set 'rsc-directory' rather than
	mess about with the resolve path.

	* scheme/supercollider/ugen-math-procedures.scm: Create file, this
	file is generated by a compiler, do not edit.

	* scheme/rsc/startup.scm: Delete compile instructions and replace
	with verify instructions.

	* scheme/rsc/implementation.scm: Change implementation of C level
	extensions to be in two parts, as the readline module in the PLT
	distribution does.  

	* scheme/supercollider/ugen-math.scm: Delete reliance upon 'eval'.
	Compile to a local file and add that file to the implementation
	file list.  Add verification code.

	* scheme/supercollider/uspec-compile.scm: Delete reliance upon
	'eval'.  Compile to a local file and add that file to the
	implementation file list.  Add verification code.

2004-06-27  Rohan Drape  <rohan@henri.localdomain>

	* scheme/collection/list.scm: Write list-geom which is equivalent
	to the SC3 Array.geom method.

	* help/Examples/EX-49.scm: Add example from SC3.

2004-06-22  Rohan Drape  <rohan@henri.localdomain>

	* scheme/host/interface.scm: Add interface to check if the X
	toolkit is available.

2004-06-21  Rohan Drape  <rohan@henri.localdomain>

	* scheme/rsc.ss: The current build from rsc/compile.scm requires
	only trivial fixes to compile up to the point where the C level
	extensions are required.  The remaining issues are SRFI-1 and
	SRFI-19 name clashes.  For the former variant names should be used
	where required.  For the latter only those names actually used
	should be required.

	* scheme/collection/list.scm: Rename map* and for-each* to have an
	@ suffix.  This is more in keeping with standard * as suffix use.
	In particular map* may be used for SRFI-1 map, since the PLT
	module system does not allow map to be redefined by that SRFI.

	* scheme/generic/generic.scm: Add define-generic* variant to use
	set! to redefine existing binding.

	* scheme/math/resource-id.scm: Rename to
	make-resource-id-generator to avoid overwriting name used by
	define-structure.

	* scheme/file/resolve.scm: Rename resolve-path to avoid clas with
	mzscheme primitive.

	* scheme/host/xml.scm: Stop ssax from re-exporting procedures
	define in SRFI 1.

	* scheme/rsc/startup.scm: Add anonymous procedure as argument to
	rsc-startup to facilitate emacs mode change described below.

	* emacs/rsc.el: Extend to add the directory that the rsc.scm file
	is loaded from to the resolve path and *then* call rsc-startup.
	This allows RSC to be used from the location it is unpacked to by
	adding a few lines to ~/.emacs.

	* scheme/core/syntax.scm: Rename redefine procedures to define*.
	This is better for readability and also helps the emacs font lock
	code out.

	* Makefile.am: Remove `share' directory and move subdirectories to
	top directory.

	* share/scheme/rsc/compile.scm: Implement draft of
	rsc-make-rcs-module.  This indicated the error fixed below but
	needs more work to be useable.

	* share/scheme/core/color.scm: Fix naming error, pow to expt.

	* share/scheme/math/random.scm: Fix naming error, *pi* to pi.

	* share/scheme/math/math.scm: Add stub for atan2.

	* share/scheme/file/path.scm: Fix bad character constant, \#/ to
	#\/.

	* share/scheme/host/tcp.scm: Fix naming error.

	* share/scheme/host/sort.scm: Import only mergesort from mzlib
	list library.

	* share/scheme/host/procedure.scm: Fix naming error.

	* share/scheme/math/coordinate.scm: Fix naming error.

	* share/scheme/core/procedure.scm: Add redefine-procedure syntax
	for reason as below.

	* share/scheme/core/syntax.scm: Add redefine syntax.  Within the
	PLT module system it is not legal to 'define' existing values.

	* emacs/rsc.el: Move procedures from common.el to this file,
	common.el is deleted.  Make it not an error if sclang mode is not
	available, possible in some situations.

2004-06-18  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Examples/EX-26.scm: Add amplitude control.

	* share/scheme/rsc/compile.scm: An mzscheme version of compile.sh.

	* src: Delete directory and move scheme extensions to share/scheme.

	* share/scheme: Major reorganzation of source tree.  This time
	there are proper names for sub-directories.  

	* share/help/UGens/Noise/BrownNoise.help.scm: Create help file.

	* src/scheme/random-taus88.c: Fold common file and delete.

2004-06-17  Rohan Drape  <rohan@henri.localdomain>

	* doc: Delete directory.  The rsc.texi file is moved to ut-31.

	* src/scheme/make-scheme-extensions.sh: Create file as alternative
	to auto* tools.  

2004-06-13  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/html.scm: Create file and implement
	`make-disguised-mailto'.

2004-06-12  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Examples/EX-47.scm: Add file, translation from JMcC.

2004-06-09  Rohan Drape  <rohan@henri.localdomain>

	* emacs/Makefile.am: Delete sc3.el and rtf.el.  Use sclang mode
	instead.

	* share/scheme/ugen-math.scm: Change DbAmp mappings to db-to-rms.

	* emacs/rsc.el: Add RoundUp to operators list.

	* share/scheme/binaryop.scm: Add RoundUp to list, this is *very
	fragile* if the enum list is changed at SC3.  Add comments and
	spacing to allow basic side by side comparison.

	* share/help/UGens/Analysis/Pitch.help.scm: Create help file.

	* share/help/UGens/Analysis/Compander.help.scm: Create help file.

	* share/help/UGens/FFT/PV_ConformalMap.help.scm: Create help file.

	* share/help/UGens/Filters/LinLin.help.scm: Create help file.

2004-06-08  Rohan Drape  <rohan@henri.localdomain>

	* share/help/UGens/Analysis/RunningSum.help.scm: Create help file.

	* share/help/UGens/FFT/Convolution.help.scm: Create help file.
	The UGen does not seem to work properly.

	* share/scheme/uspec-sc3.scm: Add FFT2 USpecs.

	* share/scheme/ugen-compound.scm: Implement RunningSum.rms.

	* share/scheme/rsc.scm: Make a module definition for RSC.  This is
	an initial look at putgting all of this into PLT's collects
	system.

	* share/scheme/string.scm: Add string->integer, extended from
	implementation in Oleg Kiselyov's SSAX distribution.  Move
	real->string from math.scm.

	* share/scheme/list.scm: Add list-intersperse from Oleg Kiselyov's
	SSAX distribution.

	* share/scheme/generic/generic.scm: Change construct-* names to
	make-*.

2004-05-30  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/ardour.scm: Fix pan conversion routines to follow
	new form used by ardour.

2004-05-26  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/controller.scm: Alter controller-setup! to reset to
	defaults for unused parts of the setup.  The behavior here needs
	to be clarified.  Also setting the value `pre-warp' should be made
	the exception rather than the rule.  

	The controller system is becoming quite stable.  Redesign
	increment-controller-state! to set the value of the controller to
	a value by dividing the control space into `depth' parts.  For two
	state switches this puts either a zero or a one on the bus,
	actually of course the post warp values, which make bypass
	switches very straightforward to implement.  The state argument to
	the receiver should probably be removed, I never liked that manner
	of combining a switch and a control, making the switch a mechanism
	for setting the control, as this change does, is much clearer.

	* share/scheme/interface/window.scm: Initialize last-time-stamp to
	#f.  Negative timestamps were breaking this.  The whole thing
	seems unncessary, but breaks when it is removed...

2004-05-23  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/uspec.scm: Add uspec-table-append! to make appending
	the RSU Uspec data more straightforward.

	* configure.ac: The SC3 UGens that formerly resided here have been
	moved to sw-34, RSU.  This is the start of a renewed attempt to
	get RSC working under OSX.

	Also remove PNG library to sw-35.

2004-05-02  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/rsc.scm: Add layer to *rsc-implementation-files*. 

	* share/scheme/scheme.scm: Write scheme-lines-of-code to assist in
	collecting code metrics.

	* share/scheme/character.scm: Write is-space?.

2004-05-01  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/controller.scm: Add optional window-name argument
	to controller-interface.

2004-04-29  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Examples/EX-37.scm: Add midi score for Stepper
	sequence.

2004-04-28  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/controller.scm: A significant set of changes.
	There is no longer explicit node support.  There is a singular
	warp.  There is a singular set of receivers that receive the pre
	and post warp values and the current `state' value.  There are
	pre- and post-warp variant setter and getter routines.  The
	generic routines now take an optional argument to specify which
	value to use.  The interface includes a text display of the warped
	value.  The interface is *much* more efficient, the default update
	rate has been increased by a factor of five.  The interface
	registers receivers for each controller it is interacting with and
	updates only thse controllers modified in the last display update
	cycle.  General readability fixes.

2004-04-19  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/host/xml.scm: Add file to load SXML tools.

	* share/scheme/sxml.scm: Add sxml:singular-child-element from
	sw-06.

	* configure.ac: Update use of AM_INIT_AUTOMAKE.

2004-04-07  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/uspec-sc3.scm: Add LocalIn and LocalOut.

	* share/scheme/ugen-math.scm: Fix ugen-math-input-rate to
	propogate i-rate from lisp numbers and <control> values, and the
	actual rate of <control> values.

	* share/scheme/ugen-compound.scm: Implement AudioIn.ar.

	* share/help/UGens/SynthControl/LocalIn.help.scm: Create file, do
	translation of examples from SC3.

2004-04-05  Rohan Drape  <rohan@henri.localdomain>

	* src/scheme/sound-file.c: Add left and right indices to
	sound-file:read.

2004-03-28  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/font.scm: Delete file.

2004-03-27  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/interface/button.scm: Same fix as at scribble.
	These were the only two widgets to use the font-size parameter,
	which should be deleted.  Change semantics of receiver to in all
	cases receives two arguments, where the second argument is an
	opaque value.  The 'button-number' procedure can be used to fetch
	the button number.  Other query procedures could be written as
	required.
	
	* share/scheme/server-window.scm: Fix to use scribble argument and
	not parameter to set the font size.  Make the fixed data
	more visible.

	* share/scheme/interface/scribble.scm: Add font-size argument.
	The previous approach read the `font-size' parameter when
	'draw-text' was first executed, which was a race.

2004-03-24  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/server-options.scm: Add new scsynth options, the Z
	and S options are of no interest under JACK.  The z and l options
	are useful, however the default values are fine.  The D option can
	stop the error that otherwise gets printed.

2004-03-23  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/host/srfi.scm: SRFI-19 is finally fixed in PLT CVS.

2004-03-15  Rohan Drape  <rohan@henri.localdomain>

	* share/help/UGens/Delays/CombC.help.scm: This note documents the
	documentation for linked help files.  CVS does not handle links.
	This file has only a cross reference to the CombN file.  This
	change was made in November last year but was not noted.

	* share/help/UGens/Envelopes/Line.help.scm: Create file.

2004-03-13  Rohan Drape  <rohan@henri.localdomain>

	* src/common/distortion.c: Implement diode_rectifier, from
	SWH-0.4.3 diode_1185.xml, valve_foldover from SWH-0.4.3
	foldover_1213.xml and crossover_distortion from SWH-0.4.3
	crossover_1404.xml.

	* src/plugins/RDistortion.cpp: Add RDiode, RCrossover and
	RFoldover.

	* share/scheme/uspec-rsc.scm: Add RDiode, RCrossover and
	RFoldover.

	* emacs/sc3.el: Fixes here and to rsc.el to ensure identical
	behaviour in each mode.  Unimplemented procedures are included as
	stubs with error messages, and the menus are identical, even where
	that seems odd, ie R5RS.

2004-03-11  Rohan Drape  <rohan@henri.localdomain>

	* emacs/rsc.el: Implement rsc-see-listener and bind to C-cC-g.
	This is a useful fix, also at sc3-mode.

	* share/scheme/tree.scm: Implement 'tree-filter' and variants.
	Minor reading fixes to 'tree-find'.

2004-03-10  Rohan Drape  <rohan@henri.localdomain>

	* emacs/sc3.el: Major changes.  This is now a derived mode of
	Stefan Kersten's 'sclang' mode.  It provides the same interface as
	'rsc-mode' but to sclang.  The rsc SC3 help file lookup is now via
	this mode, which is an improvement because the help file is
	visited in SC3 mode.  Some changes to rsc.el as suggested by this.
	And common.el is created to hold common procedures.  There are
	some minor changes still to be made, but this basically works.

2004-03-09  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/list.scm: Implement list-splice-if.

	* share/scheme/uspec-compile.scm: Edit c+c-proxied-w/expansion to
	_not_ splice the output list.  This behavior was not correct.  See
	EX-41.scm for a description of the expected behavior.  The
	splicing meant that a list of two-channel UGens would Mix to a
	single channel, not to two channels.  The splicing glossed over
	the incorrect handling of nested input lists.  This procedure now
	recurses correctly.

	* share/help/UGens/Oscillators/Gendy1.help.scm: Create file and
	translate examples.

	* share/scheme/uspec-sc3.scm: Add Gendy[123] USpecs.

	* doc/rsc.texi: Add SDIF section.

	* share/scheme/sdif.scm: Implement sdif-read-file* and numerous
	other fixes, particularly to procedures for determining if an SDIF
	file is of a standard type.

2004-03-08  Rohan Drape  <rohan@henri.localdomain>

	* doc/rsc.texi: Write 'Naming Conventions' section.

	* share/help/UGens/RSC/RHardLimiter.help.scm: Create file.

	* src/plugins/RDistortion.cpp: Implement RHardLimiter.

	* share/help/UGens/Filters/Clip.help.scm: Create help file.

	* src/common/distortion.c:  Implement hard_limiter_distortion.

	* share/scheme/uspec-rsc.scm: Add USpec for HardLimiter.

2004-03-06  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/generic/random.scm: Create file and move generic
	procedures from random.scm.

	* emacs/sc3.el: Create file and implement `sc3-markup-ugen-help'.
	This file was implemented as TN-18.

	* emacs/rtf.el: Create file and implement `rtf-visit-file'.  This
	file is derived from SK's sclang mode.

	* emacs/rsc.el: Implement rsc-help-from-sc3.  

	* share/scheme/uspec-sc3.scm: Add TGrains USpec.

2004-03-02  Rohan Drape  <rohan@henri.localdomain>

	* doc/rsc.texi: Add chapter on Pitch.

	* src/common/sc3-ugen.h: Create file and move macros from .c file.

	* src/plugins/RDistortion.cpp: Merge RBitDepthDistortion and
	RSampleRateDistortion into the one file.

	* share/scheme/host/open-gl.scm: Create file to require the PLT
	OpenGL bindings, used by the <gl> widget and its clients.

	* share/scheme/interface/gl.scm: Create file and implement <gl>
	widget.  This is the widget described in TN-04.

	* share/help/Examples/EX-01.scm: Rename all example files to have
	EX prefix, instead of completely unintuitive RN prefix.

	* share/scheme/generic.scm: Delete file.  Also iterate.scm.  Also
	buffer variant files for RDelaySet and RDelayMap UGens, redundant
	as noted below.

2004-02-28  Rohan Drape  <rohan@alice.localdomain>

	* src/plugins/RDelaySet.cpp: Merge both the RTAlloc and Buffer
	variants into one file.

	* src/plugins/RDelayMap.cpp: Merge both the RTAlloc and Buffer
	variants into one file.

2004-02-22  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/interface/dial.scm: Minor fixes.  Make color scheme
	more tolerable.

	* share/help/Examples/RN-22.scm: The change to synthdef-store
	makes the instrument generation over twice as fast.  This suggests
	synthdef-send is suprisingly slow.

	* TODO: Cleanup, delete done items, work some items into rsc.texi.

	* share/help/Examples: Update to use synthdef-store.  These files
	should be renamed to EX-#.example.scm, or some such.

	* share/scheme/synthdef.scm: Implement synthdef-store.

2004-02-19  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/server-connect.scm: The network address now works
	properly.  The osc-responder procedures should now work as
	expected.

	* share/scheme/network.scm: Implement a <network-address> type.
	This is the duple (host-name port-number).

	* share/scheme/host/tcp.scm: Same changed semantics to send
	network-address to the receiver as at udp.

	* share/scheme/host/udp.scm: Change semantics to send
	network-address to the receiver.  Because of some strange PLT
	details this is not efficient.  Minor fixes to implementation.

	* share/scheme/server-boot.scm: Simple fix for server-shutdown.

	* emacs/rsc.el: Fix SC3 functions to use current-server and add
	shutdown entry.  Write rsc-shutdown-sc3.  Add key binding for
	rsc-start-sc3.

	* share/scheme/server-send.scm: Changes to make default sends not
	use server latency.  This should probably be deleted altogether.
	The preffered method is to redefine -> and => as required.

	* share/scheme/resolve.scm: Delete rsc-share-directory, it is
	unused and redundant.

	* share/scheme/math.scm: Implement factorial, combinations and
	permutations.

2004-02-18  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Examples/INDEX: General cleanup.  Fix internal names
	to all be EX-NN.  The files should also be renamed.

2004-02-17  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/mthread.scm: Clarify relation to SRFI thread
	procedures.

2004-02-08  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/generic/as.scm: Create file and move 'as-type'
	procedures here.

	* share/scheme/generic/generic.scm: Move generic definitions to
	subdirectory.

2004-02-04  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/assert.scm: Import Oleg Kiselyov's assert macro.
	See http://pobox.com/~oleg/ftp/ for the original file.

	* share/scheme/syntax.scm: Add forms to support Oleg Kiselyov's
	assert macro.

	* share/scheme/interface: Various readability fixes to all
	widgets.

	* share/scheme/interface/multi-slider.scm: Add receiver disable
	switch.

	* share/scheme/interface/range-slider.scm: Create file and
	implement widget.  The implementation is not complete, it does not
	constrain slider locations.  This could be an n dimensional
	controller.

2004-01-27  Rohan Drape  <rohan@henri.localdomain>

	* src/scheme/alsa-sequencer.c: Minor implementation fixes.
	Delet send-after and implement only send.

2004-01-25  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Examples/RN-38.scm: Ceate file and implement 

2004-01-22  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/sdif.scm: Create file and implement basic
	infrastructure.

	* share/scheme/open-sound-control.scm: Add support for 'h' as
	int64 type.

2004-01-21  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/open-sound-control.scm: Add support for 't' as
	timetag type.  Should add other types from 'non-standard-standard'
	table.

2004-01-20  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Examples/RN-37.scm: Create file and write example.

2004-01-19  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/jack.scm: Write jack-clock-request-tick.

2004-01-15  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Examples/RN-36.scm: Create file and implement
	controller interface for jack.scope.

	* share/scheme/math.scm: Fix error in exact-integer?, it tested
	exactness before integerness.

2004-01-15  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/osc-receiver.scm: Fix to parse incoming bundles.
	Previously handled only plain messages, which is what scserver
	sends.

	* share/scheme/jack.scm: Create file and implement router for the
	jack.clock(1) daemon to the standard RSC OSC dispatch mechansims.

	* share/scheme/open-sound-control.scm: Fix to use exact-integer?
	when determing what type to encode a value as.

2004-01-14  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/packet-engine.scm: Rename as upd.scm and tcp.scm.

	* share/scheme/host/udp.scm: Rename as with tcp.scm.

	* share/scheme/host/tcp.scm: Rename to indicate what this actually
	is.

	* share/scheme/host/udp.scm: Use udp-send-to and do not explicitly
	establish a connection.  Use udp-send-to to bind the socket to a
	random port, SC3 sends responses to the port it receives the
	request from.

2004-01-13  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/open-sound-control.scm: Fix to support both float
	and double tags for real numbers.

	* src/common: Delete all .h files. 

2004-01-12  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/coordinate.scm: Add x/y variants.

2004-01-11  Rohan Drape  <rohan@henri.localdomain>

	* configure.ac: Delete unneccesary macros, including
	AC_CANONICAL_SYSTEM and various AC_PROG_* forms.

	* share/scheme/startup.scm: Delete loader for mouse_location.so.

	* share/scheme/rsc.scm: Delete mouse-location.scm file and remove
	reference from loader.

	* configure.ac: Delete X11 check since it was only required for
	the scheme mouse extension now deleted.

	* src/scheme/Makefile.am: Delete support for mouse location code.
	This was a legacy from before the Mouse UGens were working.

	* doc/rsc.texi: Fixes to interface section.  Spell check.  Move
	UGen Graphs section before Implicit Mul Add since these implicit
	inputs are graph constructors.

	* share/scheme/interface/dial.scm: Fix to disallow stretching.

	* share/scheme/interface/button.scm: Fix to disallow stretching.

	* share/scheme/interface/dialog.scm: Delete file.  Using dialogs
	to find files does not happen.

	* share/scheme/interface/slider.scm: Rename file and widget from
	fader.  We do not provide a horizontal slider and the name slider
	is consistent with the other widgets.  Fix to disallow stretching.

	* share/scheme/interface/multi-point-slider.scm: Fix so that
	pressing on no point selects the nearest point.  This *greatly*
	aids usability.

	* doc/rsc.texi: Add information about the Scheme language and
	update the Emacs command description.

2004-01-10  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/controller.scm: Add key-press handler to trap
	F-keys.

	* share/scheme/interface/window.scm: Fix to not trap F keys and
	instead to have a key-press stack.  Rename finalize push to
	on-close and make in tree changes.

	* share/scheme/interface/scribble.scm: Fix to not allow stretch in
	either dimension.

	* share/scheme/stack.scm: Use define-structure* to delete
	new-stack procedure.

	* share/scheme/procedure.scm: Add a fast path for the case where
	the procedure is of fixed arity and is being called with all
	arguments explictly given.  This path makes such cases over twice
	as fast.

	* share/scheme/geometry.scm: Many fixes and additions. 

	* share/scheme/interface/multi-slider.scm: Fix to use updated
	geometry procedures.

	* share/scheme/spatial-interpolator.scm: Fix to make clipping
	optional and to allow the zero distance to be set by the caller.
	Fix to use <point> type.

	* share/scheme/interface/multi-point-slider.scm: Add unique color
	generator for points.

	* share/scheme/color.scm: Rename greyscalei->rgbi and implement
	greyscale->rgb.

	* share/scheme/host/structure.scm: Implement in-<type> form at
	define-stucture*.  This can drastically improve readability of
	some types structure of structure operations.

	* share/scheme/color.scm: Rename <hsv> to <hsvi> and implement
	<hsv>.

	* share/scheme/interface/multi-point-slider.scm: Fix so that
	pressing on no point selects the last held point.

	* share/scheme/syntax.scm: Implement values->list syntax.

	* share/scheme/coordinate.scm: Fix errors and write documentation
	and tests.

	* share/help/UGens/Triggers/Stepper.help.scm: Rename file, was
	missing .help qualification.  Fix to use seq* variant.

	* share/scheme/syntax.scm: Move seq macro from Stepper.help.scm to
	here and implement seq* variant.

2004-01-09  Rohan Drape  <rohan@henri.localdomain>

	* emacs/rsc.el: Add indentation rule for 'rcv' syntax.

	* share/scheme/coordinate.scm: Create file and implement
	conversion procedures for coordinate spaces: normal, signal,
	screen and matrix.

	* share/scheme/syntax.scm: Create file and implement rcv syntax.

2004-01-08  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/interface/multi-point-slider.scm: Create file and
	implement widget.  The points need to get unique colors.

	* src/plugins/RShufflerB.cpp: Rewrite to delete useless
	abstract/concrete distinction.  Various readability fixes.

	* src/plugins/RShufflerL.cpp: Create file and implement very
	simple shuffler node.

	* src/plugins/RShufflerB.cpp: Renname file and UGen to make
	name-space for variants.  Minor readability fixes.

2004-01-06  Rohan Drape  <rohan@henri.localdomain>

	* doc/Makefile.am: Add --no-headers to html rule.

	* doc/rsc.texi: Small fixes.  Delete @defun and so on, this is not
	a manual and is not going to be one.

	* share/help: Major cleanup of help files.  The Examples and
	Tutorials and Demonstration directories are all consolidated into
	an Examples directory with numbered files and an index.  The index
	has the start of an attribution column.

2004-01-04  Rohan Drape  <rohan@alice.localdomain>

	* src/plugins/RFreezer.cpp: Same fix as to RLoopSet.

	* src/plugins/RLoopSet.cpp: Fix to allow modifiable buffers.

	* src/common/sc3-ugen.c: Write monitored buffer macros.

	* src/plugins/RTrace.cpp: Write RPlayTrace variants for rate input
	traversal.

2004-01-03  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/trace.scm: Write trace-linearize and trace-draw.

	* src/common/sc3-ugen.c: Add buffer declaration, initialization
	and printing.

	* src/common/trace.c: Create file.

	* src/plugins/RTrace.cpp: Create file and implement UGen to read
	signal buffers arranged as traces, that is (T, X, Y, Z,...).

	* configure.ac: Delete mzscheme 3m support.  It never worked as
	the instrumentation of the source code was never done.  Using the
	incremental collector at orindary mzscheme is acceptable.

	* share/scheme/plot.scm: Create file.  Plot procedures written
	above the interface widgets.

	* share/scheme/signal.scm: Create file.  A signal is a vector of
	numbers.

2004-01-02  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/syntax.scm: Create file and move general syntax to
	here for early loading.

	* share/scheme/trace.scm: Make traces over three dimensions, and
	include dimension count in the binary file.

	* configure.ac: Added language subsection for CFLAGS to assert
	std=c99 but this interacts badly with the high-precision-time.c
	file, which fails because signal.h no longer includes sigaction,
	gcc version 3.2.2.

	* src/scheme/alsa-sequencer.c: Minor readability fixes.

2004-01-01  Rohan Drape  <rohan@alice.localdomain>

	* src/common/sc3-ugen.c: Create file and write macros for
	generating plugin boiler plate.

	* src/plugins/RDelayMap.cpp: Rewrite failure to not require _nil.

	* src/plugins/RShuffler.cpp: Readability fixes.  Also fixes to all
	common files for conditional inclusion and to delete header files.

2003-12-31  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/png.scm: Write png-display and fix error in *->png
	procedures.

	* share/scheme/trace.scm: Create file and implement
	normalize-trace and write-trace.

	* share/scheme/interface/tracer.scm: Create file and implement
	widget.

2003-12-29  Rohan Drape  <rohan@henri.localdomain>

	* share/help/ServerCommands/b_setn.help.scm: Add help file.

	* share/scheme/iterate.scm: Write do-times syntax.

	* share/help/UGens/Triggers/Stepper.scm: Add help file.  This is a
	tranlsation of the SC3 help file.

	* share/scheme/uspec-sc3.scm: Add stepper spec.  This is
	incomplete, the 'resetval' should be set to 'min' if not specified.

	* share/help/UGens/Delays/BufRd.help.scm: Create file and
	translate SC3 examples.

2003-12-29  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/list.scm: Implement list-lace and list-flop.  There
	are variants of list-interleave and list-zip and are courtesy SC3.

2003-12-27  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/ivector.scm: Rewrite to have saner design.  This
	was mostly unused but is to be used for a tracing capture system.

	* share/scheme/math.scm: Write next-multiple-of.

2003-12-22  Rohan Drape  <rohan@henri.localdomain>

	* Makefile.am: Add elisp-comp to MAINTAINERCLEANFILES.

2003-12-21  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/interface/window.scm: Change alignment to center.
	This plays better under ratpoison like WM's.

	* share/scheme/procedure.scm: Add support for no argument form.
	Further optimization, and an error fix for a previous
	optimization.

	* share/scheme/type.scm: Create file and move type specific work
	from generic.scm to this file.

	* configure.ac: Add emacs lisp support.  The emacs directory is
	moved from under share to the root directory and a Makefile.am is
	created.

	* share/scheme/fifo.scm: Create file and write implementation.
	Unlike the queue implementation a fifo has a fixed size and an
	efficient implementation.

	* share/scheme/procedure.scm: Delete &only form, allow &rest as
	singular argument.  Add optimizations for variably arity
	procedures with zero and one fixed argument.

2003-12-20  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/uspec-compile.scm: Add caching optimizations to
	uspec->procedure, make all values that can be calculated when when
	generating the procedure.

	* share/scheme/procedure.scm: Fixes to allow for default values to
	be ommited from procedure definitions.

	* autogen.sh: Do not run configure.

2003-12-19  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/procedure.scm: Add syntax to make-procedure to
	allow specification of a &rest argument as the last argument, or a
	&only argument as a catch all form.

	* share/scheme/pare.scm: Create file and implement data type.
	This type is to make explicit the use of cons cells as opposed to
	lists.  Goo does not support improper lists.

2003-12-18  Rohan Drape  <rd@henri.localdomain>

	* share/scheme/procedure.scm: Create file and move implementation
	from optioned.scm and optioned-define.scm.  The implemenation is
	fixed to generate a rewriter procedure and to do that only once,
	when the procedure is created.

2003-12-14  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/table.scm: Rewrite to use the PLT hash-table
	implementation.  This is a major change, and much overdue.  All
	names were changed to be congruent with the PLT setup, the
	prefvious names were not good.  The -map and -for-each procedures
	have the argument order altered and the receiver gets both the key
	and the value.  The -clear! operation is not a primitive, so it
	may be slower, need to check PLT documentation on how this should
	be done.  In tree changes have been made as required, however this
	will need some further attention.

	* share/scheme/list.scm: Rewrite map* and for-each* to require the
	user to name the placeholders.  This is better all round, it
	allows multiple argument forms to be specified and for hygienic
	implementation, and modifications to the previous use require a
	two character change.

	* share/emacs/rsc.el: Fix rsc-font-lock-ugen-names to use
	regexp-opt as the constructor, not the non-optimizing version I
	wrote in scheme.  Add code for map* and for-each*.

2003-12-13  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/comparison.scm: Add tsc and various <type>-tsc
	procedures as required.

	* share/scheme/string.scm: Write string-tsc.

	* share/scheme/table.scm: Write table-copy and proper test.

	* share/scheme/character.scm: Write char<->number procedures.

	* share/scheme/tschedule.scm: Write tschedule-next-pulse

	* share/scheme/controller.scm: Write set-controller-values!.

2003-12-12  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/bag.scm: Create file and implement collection type.

	* share/scheme/table.scm: Implement table->list.

	* share/scheme/time-point.scm: Make one the default value for `z'
	for location translation.

	* share/scheme/list.scm: Write for-each* as variant of map*.

2003-12-11  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/time-point.scm: Add procedures for parsing the
	literal representations of time points.  Rename set operations to
	include set in the name.  Add location generator and parser with a
	paramter held base value.

	* share/scheme/symbol.scm: Add comparison predicates as variants
	of the R5RS string comparisons.

	* share/scheme/comparison.scm: Create file and write methods.
	This allows sorting of arbitrary uniform lists.  It is useful for
	a system to be able to specify that clients must provide a uniform
	type as an opaque identifier, but not restrict the type.

	* share/scheme/host/sort.scm: Clarify documentation.

	* share/help/Demonstration/DM-010.scm: Add section to play a
	scale based melody.

	* share/scheme/thread.scm: Implement define-parameter to have the
	same form as define-global.

	* share/scheme/uspec.scm: Add optional argument to uspec-usage to
	write the default values of inputs.

	* share/scheme/controller.scm: Add controller-offset parameter.

2003-12-10  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/list.scm: Write map* syntax.

	* share/help/Examples/Bottle.scm: Create file.  This is from a
	post to sc-users.

	* share/emacs/rsc.el: Add procedure and menu entry and key binding
	to halt managed threads.

	* share/scheme/mthread.scm: Create file and implement managed
	threads.  This is well overdue.  The only operation at present is
	to stop all executing managed threads, but this is very useful
	when using threads for basic scheduling tasks.

	* share/scheme/thread.scm: Create file and implement thread
	syntax.  This conflicts with the PLT thread which is the SRFI
	make-thread.  Make all required in tree changes.

	* share/scheme/host/srfi.scm: Add make-thread definition.  This is
	the SRFI name.

	* share/help/Demonstration/DM-014.scm: Fix to separate the actual
	matrix from the interface.

2003-12-07  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/matrix.scm: Add various simple idioms.

	* share/scheme/kenton.scm: Create file.  This work was done as
	TN-008, see that for more details.

2003-12-06  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Demonstration/DM-010.scm: Reimplement to use ftable-*
	procedures and to refer only to provided sample.

	* share/scheme/server-send.scm: Implement server-send-bundle* and
	=>*.

	* share/emacs/rsc.el: Add rsc-scheme variable to allow the name of
	the interpreter to use to be set by the user.

	* src/scheme/Makefile.am: Add support for compiling scheme extensions for
	the PLT 3M interpreters.  

	* configure.ac: Add support for compiling scheme extensions for
	the PLT 3M interpreters.  

	* share/scheme/matrix.scm: Implement set-matrix-row!,
	set-matrix-column!, and matrix->list<-matrix and
	matrix->vector<-matrix procedures.

	* share/scheme/vector.scm: Implement vector-copy!, this is in SRFI
	43, but there is no implementation in PLT and I have only the
	specification.
	
	* share/emacs/rsc.el: Fix and rename symbol preparation code, now
	known as rsc-cleanup-symbol.  Add support for looking up the
	Server Command help files.

	* share/help/ServerCommands: Add directory and start adding files.
	There will be one file for each command.  The documentation is
	directly from the SC3 Server-Command-Reference.rtf file.  Examples
	can be added also.  This is a sanity measure.  Perhaps some code
	to parse the RTF file and find the appropriate section could be
	written, perhaps <sk>s emacs code does this.

	* share/help/Demonstration/DM-009.scm: Add controller synth code.

2003-12-05  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/string.scm: Implement R5RS port operations over
	strings using SRFI string ports.

	* share/scheme/math.scm: Implement ++, ++!, -- and --! to support
	treap.scm.  Write number-tsc as three state comparison procedure.

	* share/scheme/treap.scm: Import file as basis for pqueue
	implementation.  This is Oleg Kiselyov's implementation without
	modifications.

	* share/scheme/squeue.scm: Rename pqueue to squeue file.  

2003-12-04  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/character.scm: Create file and implement is-CLASS?
	predicates.

	* share/scheme/list.scm: Implement list-pad-right.

2003-12-02  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/host/srfi.scm: Delete renaming code as 205.7 does
	this correctly.

	* configure.ac: The check for the SC3 headers is commented out, it
	fails now that include tree is restructured.

	* src/plugins/Makefile.am: The revised distribution rules for SC3
	maintain the include tree when installed.  This required adding
	include directives for all branches of the tree to this Makefile
	and deleting the SuperCollider prefix from the include driectives
	of all plugin source files.

2003-12-01  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/table.scm: Make mtable implementation sane.

	* src/scheme/high-precision-time.c: Fixes to documentation and to
	naming.  Propagate as required.

2003-11-29  Rohan Drape  <rohan@henri.localdomain>

	* doc/rsc.texinfo: Add documentation for ftable and midi-engine.

	* share/scheme/midi-receiver.scm: Refine predicate generator for
	midi-receiver-register.

	* share/scheme/list.scm: Rename list-uniform?.

	* share/scheme/warp.scm: Implement warp-linear-integer.

	* share/scheme/vector.scm: Implement vector-traverse and
	vector-mutate!.

	* src/scheme/alsa-sequencer.c: Implement alsa_sequencer_port_list.
	In isolation this is not that useful.

2003-11-28  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/file.scm: Write open-output-file*.

	* share/scheme/midi-file.scm: Fix error in
	read-variable-length-integer.  Fix error in
	parse-possible-multipart-sysex-event.

	* share/scheme/midi-character-device.scm: Implement
	midi-character-device:connect for ALSA compatability.  Use
	write-byte-string instead of display.

	* share/help/Demonstration/DM-011.scm: Add lag values to control
	inputs.  Add midi support for controller system example.  Delete
	actual widget construction and use standard interface constructor.

	* share/scheme/controller.scm: Rename controller-install! to
	controller-setup!.

2003-11-27  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/controller.scm: Merge switch functionality into
	controller.  Rename operations for clarity.  A controller has a
	name, a value, a warp, a depth, a state, a set of value receivers,
	a set of state receivers.  Implement controller-install!.  Fix
	spelling error at controller-midi-initialize.

	* share/scheme/midi-engine.scm: Add basic error reporting.  Add
	support for segmented SysEx messages.  The alsa sequencer client
	sends messages to the recv procedur in this way.

	* src/scheme/alsa-sequencer.c: Add error reporting.  Pass SysEx
	messages even though they are in segmented form.

	* share/scheme/switch.scm: Delete file.  The controller system now
	implements this functionality.

2003-11-23  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/table.scm: Make mtable interface saner.  Fix all in
	tree uses.

	* share/scheme/interface/label.scm: Delete file.  This was never a
	good idea.

	* src/scheme/png.c: Make data read and written as integers.  Also
	requird fixes to png.scm.

	* share/scheme/interface/image.scm: Implement image-get and
	image-blit.

2003-11-22  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/interface/window.scm: Make window stretchable and
	frames not stretchable.  Alter alignment to be top left.  This
	makes windows useful under ratpoison, before they were causing
	very bad flickering due to some resizing request problem.

	* share/scheme/interface/button.scm: Add support for receiving
	which button was pressed.

	* share/scheme/interface/scribble.scm: Use fixed width font.  The
	same change at button also.

	* share/scheme/server-window.scm: Write format-server-status and
	simplify the server-window code.  

	* share/scheme/interface: Create directory and move all widget
	files here.  It was a mistake to not keep these apart, see log
	entry below.  The implementation is entirely host dependant.

	* share/scheme/resolve.scm: Write resolve-path-append!.

	* share/scheme/diatonic-scale-degree.scm: Add error checks.
	Actually there are various changes to all pitch files.  There is a
	tension between having a system that allows pitch entities to be
	easily written as literals, and having a strongly typed system.
	After some considerations and some aborted attempts at altering
	the system, it is decided that: pitch entites are numbers or
	symbols or duples thereof; entity predicates determine if an
	object is a normal form of the entity, the normal forms of various
	entities overlap, the predicate system is not exclusive; an entity
	has a singular normal form and may have any number of input forms,
	all entities have a normal form constructor that accepts any legal
	input form and produces the normal form, this procedure is named
	normal-entity; all operations accept input forms and produce
	normal forms; there are no generic or data driven operations, all
	operations are explicitly named.  This describes what should be
	the case, and for the most part what is the case.  Any further
	changes to the pitch system should be to make it comply with this
	schema.

	* share/scheme/pitch-class-name.scm: Add normal-pitch-class-name.

2003-11-21  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/resolve.scm: Fix error in rsc-share-directory.

	* share/scheme/string.scm: Fix the list as-string method to recurse.

	* share/scheme/generic.scm: Alter define-method to define the
	generic procedure.  This is not efficient but allows methods to be
	defined without declaring the generic, which is a good thing.  Fix
	define-method and construct-method to allow the body to contain
	multiple expressions.

	* share/scheme/controller.scm: Fix contoller-midi-initialize to
	handle channel information correctly and to write zero one
	normalized values.

2003-11-21  Rohan Drape  <rohan@alice.localdomain>

	* doc/dir: Delete file, this is not used.

2003-11-20  Rohan Drape  <rohan@alice.localdomain>

	* doc/rsc.texinfo: Add dircategory and direntry information.

	* share/scheme/uspec-sc3.scm: Add PV_Mul and PV_Add.

	* share/emacs/rsc.el: Add '_' to allowable characters in UGen
	names, this is to lock the PV_Operation UGens.

	* share/scheme/geometry.scm: Write generate-line procedure.

	* share/scheme/multi-slider.scm: Add interpolation code so that
	all contiguous sliders are set when dragging.  Add draw-level-only
	option to draw only the level marker, not the whole slider.

	* share/help/Demonstration/DM-003.scm: Make a proper procedure.

2003-11-19  Rohan Drape  <rohan@alice.localdomain>

	* share/help/UGens/Envelopes/FreeSelf.help.scm: Simplify example.

	* share/help/Demonstration/DM-016.scm: Create file and move
	number-editor from RSC sources to here.
	
	* share/help/Demonstration/DM-015.scm: Fix various random number
	generator uses, document SC3 names and how to get the same results
	from RSC.  Add the sustained variant and a switch to select
	between versions.  Make some parts slightly more idiomatic scheme.
	Make a proper procedure.

	* share/scheme/resolve.scm: Write resolve* variant.  Change
	extension loaders to use this variant.

	* share/scheme/random.scm: Write random* variant.

2003-11-16  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/midi-bytes.scm: Write midi-status-check.

	* share/scheme/controller.scm: Write contoller-midi-initialize.

	* share/scheme/help/UGens: Many minor fixes and additions.  The
	format for help files has been settled for a while, though older
	files were incorrect.  All files are now updated and have the
	correct form, which is: the usage on the first line behind ;;;, a
	blank line, a description on as many lines as required behind ;;;,
	as many examples as required, optionally preceded by comments
	behind ;;.

	* share/scheme/ugen-math.scm: The LinRand UnaryOp is a name
	conflict with the LinRand UGen.  This was noted as unresolved in a
	log entry for 2003-07-21.  It is now fixed.  The OpUGens are made
	with an Op prefix, so that the LinRand operator UGens are
	OpLinRand.[aki]r.  The generic operator UGen, which is what the
	user should always be using, is named without the Op prefix,
	therefore LinRand is the generic UGen operator name.  The actual
	UGen has no rate generic version and is accessed as
	LinRand.[aki]r.  This does not resolve conflicts between binary
	and unary operators, if there are such conflicts they can be
	resolved by using UOp and BOp prefixes.  This fix also affects the
	file uspec-math.scm.

	* share/emacs/rsc.el: Fix rsc-drop-trailing-rate-specifier to
	properly quote the dot, which requires two backslashes.  The same
	fix at rsc-help-from-rsc.

	* share/scheme/ugen-math.scm: Rewrite ugen-math-compile to collect
	all define s-expressions into a list, prepend a begin, and
	evaluate in the interaction environment.  There are now exactly
	two instances of 'eval' in the RSC sources, this and the use in
	uspec-compile.scm.  In both cases the expression evaluated has a
	read/write equivalent form.  These changes are important for any
	move towards a compiled environment.

	* share/scheme/uspec-compile.scm: Rewrite uspec-compile to write a
	list of s-expressions that can be written to file or evaluated to
	generate bindings for a UGen.  This is a slower procedure since
	the generic UGen procedure is generated for each specialization
	rather than only once, however the expression generated can has a
	read/write equivalent form.  uspec-compile-table is also rewritten
	to support this.

2003-11-15  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/disassemble.scm: Fix error in pass-six that where
	it did not recurse properly down the tree.

	* share/help/UGens/Envelopes/DetectSilence.help.scm: Create file
	and write example.

	* share/help/UGens/Controls/Slew.help.scm: Create file and use
	example from SC3.

	* share/help/UGens/Delays/PitchShift.help.scm: Create file and
	write example.

	* share/scheme/uspec-sc3.scm: Add PitchShift UGen.

	* share/scheme/tschedule.scm: Fix error in tschedule-absolute,
	which was rescheduling using itself.  Write tschedule-base as part
	of this fix.  Fix error in tschedule-delta* which was unnecesarily
	scheduling itself twice.

2003-11-14  Rohan Drape  <rohan@henri.localdomain>

	* share/help/Demonstration/DM-015.scm: Create file and implement
	FM synthesis example posted by JMcC to sc-users.
	
2003-11-11  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Demonstration/DM-014.scm: Create file. This
	implements a very simple step sequencer interface.

2003-11-10  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/vector.scm: Implement vector-copy.

	* share/scheme/png.scm: Add png<->matrix translatorsm variants of
	the array forms.

	* share/scheme/matrix.scm: Create file and write implementaion.
	This is not fast but the array implementaion of PLT, SRFI-25, is
	slower.

	* share/scheme/color.scm: Implement rgbi-inverse and rgbi-average.

	* configure.ac: Fix help string definitions.  Stop test for PNG
	from adding the library to the standard variables.  The
	src/scheme/Makefile.am handles libraries there.

	* share/image/hand.png: Add file and directory.  This is a test
	file.

	* src/scheme/mouse-location.c: Delete support for Carbon.  RSC is
	not going to run on OSX any time soon, it is an aborted attempt.
	And this is not an essential file.

	* configure.ac: Add configuration requirement for libpng.  Delete
	erroneous check for X11 library.

	* share/scheme/image.scm: Create file and write implementation.
	An image widget is for displaying pixel map images stored as
	scheme data.

2003-11-09  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/png.scm: Create file and write structure and
	wrappers png<->array translators.

	* src/scheme/png.c: Create file.  This extension reads and writes
	image files in the PNG (Portable Network Graphic) format.  The
	files are represented in RGB form as an ordinary scheme vector of
	length: width * height * three.
	
	* share/scheme/window.scm: Change constructor to have a make-
	prefix.  Change all other widgets and all in tree uses.  A tedious
	change but neccessary.

	* share/scheme/file.scm: Write with-output-to-file*.

	* share/scheme/color.scm: Create file and implement procedures:
	rgbi->list, greyscale->rgbi, temperature->rgbi, hsv->list,
	hsv->rgbi, rgbi->hsv, gradient->hsv.

	* share/scheme/host/structure.scm: Implement define-structure* to
	allow and encourage straightforward redefinition of constructors.
	The procedure make-TYPE* is bound to the primitive make-TYPE so
	that can be redefined as a user level constructor.  Change all in
	tree names of the form TYPE-create to be make-TYPE using this
	syntax where required.

	* share/emacs/rsc.el: Simplify define font lock rule.  All forms
	of define with - or / extensions will be locked.

	* share/scheme/array.scm: Create file and implement
	make-normal-array, normal-array?, array-extent, array-size,
	array-traverse, array-mutate!.

	* share/scheme/math.scm: Add hyperbolic circular functions.

	* share/emacs/rsc.el: Edit rsc-find-data-directory to only search
	if the rsc-data-directory variable has not been set.  This is
	important because not finding a directory is an error, and for in
	tree usage the search will fail, though the user has set the
	location by hand.

	* share/scheme/optioned-define.scm: Renamed to alternate lambda to
	make-procedure, was procedure.

	* share/scheme/open-sound-control.scm: Rewrite to use the
	byte-string procedures instead of string procedures.

2003-11-08  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/host/byte-string.scm: Implement separate layer of
	string like procedures for byte strings.  This is just a simple
	renaming with some simplified accessors that take care of
	char<->integer conversion.  It is important to do this else the
	assumption will get deeply worked into the sources.

	* Makefile.am: Add an install invocation to create the pkgdatadir.
	Add notes on EXTRA_DIST usage.  Actually spent some time reading
	the automake manual and playing with 'find' to try and get a
	better system but I think the minor problem of distributing and
	installing CVS files is no great lossage.  A short though tedious
	shell script can be written to install the share directory without
	the CVS files, but the correct fix is not to distribute them, and
	that fix is messy or complicated.

	* share/scheme/midi-constants.scm: Add System Message and Real
	Time Message constants.  Correct use of System Exclusive name.

	* share/scheme/midi-character-device.scm: Edit to use constants
	instead of literals and delete unnecessary comments.

	* share/scheme/midi-mmc.scm: Create file and add constants and
	some comments.  The constants are from the Ardour sources.

	* share/help/UGens/Delays/CombN.help.scm: Make links to this file
	for names CombL.help.scm and CombC.help.scm.  If this does not
	play well with CVS then the links may have to built by the Make
	system, or the emacs code modified so that it can find these
	files, or the documentation split into multiple files.

	* share/emacs/rsc.el: Delete trailing caret handling when looking
	up source files.  That naming convention is no longer used.

2003-11-07  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/window.scm: Make windows non stretchable.  There
	are no widgets that it is useful for.

2003-11-06  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Demonstration/DM-013.scm: Create file for measure
	based scheduling.

	* share/scheme/schedule.scm: Rename schedule-clock to
	schedule-current-time.  This is in keeping with the tschedule and
	mschedule naming scheme.  Change all in tree usage.

	* share/scheme/mschedule.scm: Rewrite to implement proper
	behavior.  The scheduled procedures now receive the three
	arguments: measure, division, and time.  To reschedule itself a
	procedure must return a list of two numbers: measure interval and
	division interval.  mschedule-delta* schedules in relation to the
	start of the next measure.

	* share/scheme/math.scm: Write quotient* and remainder*.

	* doc/rsc.texinfo: Start chapters on the schedulers.

2003-11-05  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/schedule.scm: Identical changes as at tschedule.
	The schedule-delta* variant is deleted.

	* share/scheme/tschedule.scm: Move rescheduling code from delta to
	absolute scheduler, which is renamed to tschedule-absolute.

	* share/scheme/point-slider.scm: Add receiver status argument to
	`point-slider-set!' and implement correct behavior internally.

2003-10-31  Rohan Drape  <rohan@henri.localdomain>

	* doc/.cvsignore: Add texinfo.tex, I do not edit that file.

	* Makefile.am: Add uninstall-local hook to remove the shared files
	that get installed.

2003-10-29  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/multi-slider.scm: Various fixes and rewrite
	receiver to get values in range zero to one and the setter
	likewise.  Update dependencies.

	* share/scheme/point-slider.scm: Various fixes and rewrite
	receiver to get values in range zero to one and the setter
	likewise.  Update dependencies.

2003-10-28  Rohan Drape  <rohan@henri.localdomain>

	* share/emacs/rsc.el: Add define/override to font lock keywords.

	* share/scheme/dial.scm: Use define/override.  Also in applicable
	files.

	* share/help/Demonstration/DM-007.scm: File is obsolete after
	widget cleanup.

	* share/help/Demonstration/DM-005.scm: Fix error is use of
	synth-new.  Arguments are of the form '(INDEX VALUE...).

	* share/scheme/alsa-sequencer.scm: Implement alsa-sequencer:send
	at scheme level.

	* src/scheme/alsa-sequencer.c: Rename alsa-sequencer:send to
	alsa-sequencer:send-after.
	
	* share/scheme/midi-engine.scm: Re-implement midi-engine-start to
	allow the mechanism and device to be specified.

	* share/help/Examples: Fix errors introduced by (random) rewrite
	and add authorship attribution for JMcC.

	* share/emacs/rsc.el: Add a new help procedure to run the USpec
	usage procedure.  This is bound to C-cC-u, which formally updated
	the TAGS file, this is now at C-cC-t.

2003-10-24  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/finalize.scm: Delete file.  Rename to
	window-finalize-push! and move to window.scm.

	* share/scheme/slider.scm: Delete file.  Use fader instead.

	* share/scheme/message.scm: Delete file.

	* share/scheme/list-box.scm: Delete file.

	* share/scheme/fader.scm: Reimplement using canvas% and to have
	same interface as dial.

	* share/scheme/entry.scm: Delete file.

2003-10-23  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/label.scm: Rewrite to use scribble instead of
	message.

	* share/scheme/server-window.scm: Rewrite to use scribble instead
	of message.

	* share/scheme/scribble.scm: Add scribble-size parameter.

	* share/scheme/number-editor.scm: Rewrite to be a proper type,
	include a label and text display, and to use the dial widget.

	* share/scheme/file-system.scm: Allow optional arguments.

	* share/scheme/frame.scm: Rename row and column to frame and add
	optional vertical: argument.

	* share/scheme/sequence.scm: Rewrite as generics and rename from
	sequence-length to len, from sequence-ref to elt, and from
	sequence-set! to elt!.  Write elt-right.

	* share/scheme/random.scm: Rewrite random and random-integer as
	generics.

	* share/scheme/generic.scm: Delete restriction on zero argument
	methods, see random.scm for usage.

	* share/scheme/stack.scm: Rewrite to use define-structure to have
	proper type.

	* share/scheme/osc-responder.scm: Add initialize procedure.

	* share/scheme/server-window.scm: Add initialize procedure.

	* share/scheme/dot.scm: Add initialize procedure.

	* share/scheme/server.scm: Add initialize procedure.

	* share/scheme/tschedule.scm: Add initialize procedure.

	* share/scheme/schedule.scm: Add initialize procedure.

	* share/scheme/startup.scm: Split into intialize and start phases.
	Initialize is run before the user run control file is read,
	startup after.

	* share/emacs/rsc.el: Add font locking for define-global.

2003-10-22  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/rsc.scm: Reorganize load list to reflect
	functionality.  This is not complete but is much better than the
	previous layout.

	* share/scheme: Major changes to directory structure.  Only host
	dependent files are in a separate directory, and that directory is
	named host.  All other files are flat in the one directory.  The
	distinctions were to aid modularization and to constrain
	dependencies but were not fantastically successful.  Sometimes
	they were unhelpful because it was not clear where to look for
	things.  These changes, with the changes below, involved so much
	file and directory manipulation that the CVS repository was started
	again.  The old repository is at rsc.old.

	* src/common: Further major changes.  All unused files are
	deleted.  All files are cleaned and have an appropriate header
	file.

	* share/scheme/s/synthdef-declare.scm: Add quoting to the rate
	argument of with-controls so that symbolic names do not need to be
	quoted in synth declarations.

	* share/scheme/s/control.scm: Implement control-rate-normal-form
	to allow rate specifiers to be symbolic.

	* share/scheme/make-tags.sh: Add rule to tag procedures created
	using define-procedure.

2003-10-21  Rohan Drape  <rohan@henri.localdomain>

	* src/common: Major changes to start clearing this out.  All files
	have been renamed to not include prefix.  All procedures have been
	renamed likewise.

2003-10-11  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/ugen-math.scm: Rewrite compiler to write to file
	and load file rather than call eval.

	* share/scheme/s/uspec-compile.scm: Write uspec-compile-table.

	* share/scheme/e/file.scm: Implement unlink* which allows non
	existant files to be unlinked.

	* share/scheme/s/controller.scm: Add offset argument to interface
	generator.

2003-10-10  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/e/warp.scm: Rewrite as-warp as generic. 

	* share/scheme/e/sequence.scm: Rewrite as-list and as-vector as
	generics.

	* share/scheme/e/string.scm: Implement generic as-string and
	standard methods.

	* share/scheme/s/switch.scm: Create file and implement a set of
	global shared state cycling integer accessed switches.  Implement
	interface and include offset for first switch.

	* share/scheme/i/button.scm: Reimplement directly above canvas to
	match dial and scribble, the only other widgets in actual use.
	Add initial states argument, rename button-set! to button-states!
	and write correct button-set! with receiver inhibitor.

	* share/scheme/e/generic.scm: Rewritten to use syntax-case rather
	than eval.  The new version is not only cleaner but also a little
	faster.
	
2003-10-09  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/i/switch.scm: Delete file and test file.  A switch
	is a form of button with only two states, one drawn as " " the
	other as "X".
	
	* share/scheme/i/window.scm: Add event handler to trap function
	key presses.  These are used to increment the global switches.

2003-09-16  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/e/string.scm: Write abbreviate to shorten a string
	to a readable abbbreviation.  This is simple minded but works
	tolerably.  It is the algorithm provided by ardour with one small
	improvement, to leave the first character intact.

	* src/plugins/RLoopSet.cpp: Fix to coerce float argument to
	integer to quieten compiler.

	* share/scheme/s/controller.scm: Add label field to controller and
	extend interface.

	* share/scheme/i/scribble.scm: Create file and implement widget
	with same behavior as the message widget but using a canvas to
	allow basic font changes.  Also write optimization for equal
	string set.

2003-09-15  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/m/tschedule.scm: Add optimization for setting tempo
	to value it is already at.

	* share/scheme/e/list.scm: Write sublist to get contiguous subset
	of a list.

	* share/scheme/s/controller.scm: Write controller-interface to
	create a simple standard GUI to the controller system and
	controller-state to get the state of a set of controllers.

2003-09-14  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/controller.scm: Add degree argument to
	controller-initialize.

	* share/scheme/s/node.scm: Fix error at node-setn*.

	* share/help/UGens/RSC/RFreezer.help.scm: Fix to use scheme
	controller system.

	* share/scheme/m/mschedule.scm: Fix implementation and design.
	This work is not complete, a correct implementation should allow
	the measure length to be altered, and should provide the scheduled
	procedure with three arguments: measure, pulse and time.

	* share/scheme/e/math.scm: Implement real valued modulo
	calculation.

	* share/scheme/m/tschedule.scm: Many fixes to design and
	implementation.  Behaviour is now closer to the TempoClock of SC3.
	Delta scheduling relative to an exact pulse location is now
	tschedule-delta*.  Procedures receive two arguments, the current
	pulse and the UTC time.

2003-09-13  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/m/after.scm: Reimplement to not use parameter
	semaphore.  The previous implementation failed for multiple
	threads.

	* share/scheme/e/pqueue.scm: Add arbitrary argument support to
	dispatch.  This required fixes to the elide special cases.  Fix
	error in dispatch where value was incorrectly cached.  Make it an
	error to dispatch on an empty queue, add checks to schedulers that
	use this pqueue.  Implement pqueue-empty? predicate to allow this.

	* share/scheme/m/schedule.scm: Fix to provide the scheduled
	procedure with the time at which it is called and to allow the
	standardschedulers to reschedule the procedure by returning a
	number.  This required changes to pqueue.scm and to clients of the
	scheduler.

	* share/audio/metal.wav: Make sound file smaller and rewrite as an
	eight bit data file.

2003-09-12  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/i/dial.scm: Fix to allow set without sending to
	receiver, syntax is an optional third argument.  This should be
	mirrored to other widgets.

	* share/scheme/s/controller.scm: Create file and implement scheme
	interface to SC3 control busses with support for node messaging
	and generic receivers.

2003-09-11  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Tutorials/TU-007.scm: Create file indicating use of
	n_mapn and c_setn.

	* share/scheme/s/server-notification.scm: Add generic at-node-end
	notification.  This is to support control operation at level below
	the node system.  Required addition of field at server record.

2003-09-10  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/i/dial.scm: Fixes to use relative motion for dial
	interaction, to make the setter work correctly, to not draw a
	border andinstead draw a circlular outline..

2003-09-09  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/i/dial.scm: Create file and implement simple dial
	widget.  Create test files also.

	* share/scheme/e/math.scm: Implement polar<->rectangular
	conversion routines.

	* share/scheme/i/multi-slider.scm: Fix to use
	internal-set-slider. Fix incorrect comments.

2003-08-25  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/envelope.scm: Write Env.trapezoid to generate
	static four element breakpoint envelopes from shape and skew input
	values.

2003-08-13  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/r/startup.scm: Fix current-server initialization to
	proceed only if the user .rsc.scm file has not set it.

	* share/scheme/s/server-window.scm: Delete server-window-local and
	write current-server-window.

	* share/emacs/rsc.el: Fix to use current-server not local-server
	where appropriate.

	* share/scheme/h/udp.scm: Fix to support non-local servers,
	udp-bind! was incorrectly given the host-name string.

	* share/scheme/s/server-send.scm: Change ->, ->* and => to use the
	current server parameter.  This will be marginally slower, but
	works properly for non-local servers.

2003-08-11  Rohan Drape  <rohan@alice.localdomain>

	* configure.ac: Remove unnecessary library checks. Preliminary
	work to support Darwin.

	* src/scheme/mouse-location.c: Collect global data into data
	structure.  Implement support for Carbon under OSX.

2003-08-10  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Demonstration/DM-010.scm: Various fixes and
	simplifications.

	* share/scheme/e/path.scm: The behavior of file-name-resolve was
	altered when the name prefixes were stripped, this change allows
	directories to be resolved again.  Add test case.

2003-08-09  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/envelope.scm: Some fixes to use generic math
	rather than scheme math, this should be fixed for all envelopes.

	* share/help/Tutorials/INDEX: Create file.

	* share/scheme/m/tschedule.scm: Add current-tschedule parameter
	and startup initialization.

2003-08-08  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/ugen-math.scm: Add i-rate cases for unary and
	binary generic math operators.

	* share/scheme/e/vector.scm: Implement the transfer function
	lookup proceudre vector-transfer-function-lookup.  There is a list
	variant also.

	* share/help/Demonstration/DM-010.scm: Create file.  Demonstration
	of tschedule based cycle generators using sample playback.

	* share/help/Demonstration/INDEX: Create index file for
	demonstration files.

2003-08-07  Rohan Drape  <rohan@alice.localdomain>

	* share/help/Demonstration/DM-003.scm: Add clamp to zero code.

2003-08-06  Rohan Drape  <rohan@alice.localdomain>

	* share/scheme/s/synthdef-declare.scm: Simplify the 'synthdef'
	syntax by making it use the 'with-controls' syntax.

2003-07-23  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/list.scm: Rename list-flatten-one-layer to
	list-splice, name courtesy Oaklisp.  Delete list-flatten, it is
	identical to tree-leaves.  Rename list-tabulate to list-tabulate*.
	Make required in tree changes.

	* share/scheme/e/tree.scm: Rename vectorize-list-structure from
	list.scm to tree->vector.

	* share/scheme/m/mschedule.scm: Create file.  This replaces
	measure.scm which is deleted.

	* share/scheme/m/tempo.scm: Delete file.

	* share/scheme/e/optioned-define.scm: Reimplement to use
	syntax-rules.  Drop support for evaluating default values, that
	was never a good idea.  Current pattern requires all arguments to
	have defaults, which could be fixed.

	* share/scheme/e/stream.scm: Delete support for non stream values
	at stream-car and stream-cdr.  Implement using structure <stream>.

2003-07-22  Rohan Drape  <rohan@henri.localdomain>

	* AUTHORS: Add SC3 authorship note, it should be stressed in
	as many places as possible that RSC is a derivative work of SC3.

	* share/scheme/s/synth.scm: Rename add-action symbols to have lisp
	convention names.  SC3 names should be restricted to synth
	declarations.

	* share/help/Demonstration/DM-005.scm: Create file and implement
	scheme procedure to play a sound file.  Also files through 009.
	Files from Examples/ are deleted and moved either to Demonstration
	or to Tutorials/.

	* share/scheme/s/server.scm: Add current-server parameter, set to
	server-local at startup.

	* share/help/Demonstration/DM-004.scm: Create file and implement
	various forms of nested synthdef declarations.

2003-07-21  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/unaryop.scm: The Rand UnaryOP is a name conflict
	with the Rand UGen.  This issue is unresolved.
 
	* share/scheme/s/synthdef-declare.scm: Rewrite synthdef syntax to
	use syntax-rules correctly.  This is required to allow nested UGen
	graph generators.  This is a major fix.  

	Implement with-controls syntax to allow partial UGen graph
	constructors to add controls to the builddef that is being
	constructed.

	* share/scheme/s/builddef.scm: Rename parameter name to customary
	order, current-builddef.

	* share/scheme/s/control.scm: Implement make-explicit-control.

2003-07-20  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/pqueue.scm: Implement pqueue-dispatch-if-equal!
	to support the tschedule code.
	
	* share/scheme/m/tschedule.scm: Create file and implement
	tschedule.  This replaces the tempo scheduler, which is
	deprecated.  Events are stored in a queue using the pulse value,
	changing the tempo of the tschedule is reflected in the timing of
	already scheduled events.

	* share/scheme/m/schedule.scm: Rename everything to use the form
	'schedule' and nothing the form 'scheduler'.  For clarity.  Make
	required in tree changes.

	* share/scheme/e/optioned-define.scm: Do not export pure
	procedure.  This was not used within RSC and was basically a bad
	idea.

	* share/scheme/s/synthdef-declare.scm: Add extra case to syntax to
	ensure the default value is quoted.  This is required because we
	allow lists as default values for controls.

	* share/scheme/s/server-notification.scm: Fix to
	server-notification-start so that end notification only responds
	to nodes that are under the control of the node system.

2003-07-19  Rohan Drape  <rohan@henri.localdomain>

	* TODO: Prune and reorder.

	* share/scheme/s/disassemble.scm: Fix to handle basic controls and
	multiple rate controls.  This version does not disassemble the
	actual control list correctly.

	* share/scheme/s/control.scm: Add lag, a real number, and rate, an
	integer, fields to structure.

	* share/scheme/s/builddef.scm: Many fixes.  Build correct graphs
	taking into account control rate and lag qualifiers.

	* share/scheme/s/synthdef-declare.scm: Extend syntax to support
	'lag' and 'rate' qualifiers for controls.  The default rate is
	k-rate, the default lag is zero.  Ensure only the control label is
	quoted.

	* share/scheme/s/server-send.scm: Fix error in 'server-send+wait',
	it was not unregistering the OSC responder it installed, which
	caused errors when not all asynchronous commands were sent through
	that mechanism.  Implement '->*' as a shorthand for
	'server-send+wait'.

	* src/plugins/RDelayMapB.cpp: Create file and implement UGen.
	This is a simple buffer variant of RDelayMap.

2003-07-18  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/byte.scm: Delete file.  Move all procedures to
	e/byte.scm.

	* share/scheme/: Drop all name prefixing.  This was never a good
	idea.  Some names may now need some thought, already parameters
	have been renamed as controls, since make-parameter is a
	primitive.  Many minor fixes required to load and run basic test
	files.  The CVS was tagged as RSC-2003-07-18 before this change
	was introduced.

	* share/scheme/r/startup.scm: Rename procedure to r/rsc-startup.

	* share/scheme/i/: Change all constructors to be optional argument
	procedures.

	* share/scheme/: Change all structure usage to standard form and
	drop support for non standard form.  All constructors are
	'make-TYPE', all mutators are 'set-TYPE-FIELD!'.  Back out change
	of name to define-structure.  This was a major name change and is
	part of a move towards dropping the [ehims]/ prefixes.  And then
	to a module system.

2003-07-16  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s: Various minor changes, effort of simplifying and
	clarifying interface to SC3 server commands.

	* share/scheme/s/osc-receiver.scm: Create file and implement
	masking multiple occupancy OSC receivers, similar interface to the
	Midi receiver.  

2003-07-15  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/finalize.scm: Rename from cleanup.  Make required
	in tree changes.

	* share/scheme/s/node.scm: Delete unused procedures.  Move single
	use procedures into parent.  Simplify all shadowing of SC3
	commands.  Similar changes to synth.scm and group.scm.  Make
	required in tree changes.

	* share/scheme/i/multi-slider.scm: Create file and implement
	simple multi-slider widget.

	* share/scheme/s/synthdef-declare.scm: Rewrite s/synthdef to be
	much clearer and simpler.  Delete s/synthdef-write-file, which was
	deprecated.

	* share/scheme/h/type.scm: Rename and reimplement define-structure
	to define-type.  Structures are used by Scheme-48 and also PLT as
	part of ML type module systems.

	* share/scheme/i/point-slider.scm: Change name from point to
	point-slider.  Move all class definitions inside constructors.

2003-07-14  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/midi-receiver.scm: Fix error in cons cell test
	case.

2003-07-13  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/h/semaphore.scm: Create file, this is what was left
	in the thread file.

	* share/scheme/h/thread.scm: Delete h/make-parameter, see SRFI 39.
	Delete file, see SRFI 18 and 21.

	* share/scheme/m/midi-character-device.scm: The character device
	midi implementation is now stored in this file.  It is not used by
	default, the ALSA sequencer implementation is preferred.

	* src/scheme/alsa-sequencer.c: Rename midi-engine.c to this file.
	Rename exported procedures.  Rename scheme level accessor file.

2003-07-10  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/r/midi-engine.scm: Create file to load scheme
	extension.

	* src/scheme/midi-engine.c: Create file and implement scheme
	extension to send and receive midi events as a client of the ALSA
	sequencer.

	* share/scheme/m/test/midi-engine.test.scm: Add test for program
	control changes.

2003-07-09  Rohan Drape  <rohan@henri.localdomain>

	* doc/rsc.texinfo: Various minor fixes.

	* share/scheme/s/sound-file.scm: Create file.  Move broken
	sound-file:write: procedure here.

	* share/scheme/h/keyword.scm: Create file.  This implements self
	evaluating SC3 style keywords, ie. a symbol where the last
	character is a colon.  The implementation is derived from Swindle.

2003-07-08  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/optioned-define.scm: Rename define: to
	define-procedure.  Rename the fast variant to have a ^ suffix.
	Make required in tree changes.  This is to allow a reader syntax
	to make keywords self quoting.

2003-07-07  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/generic.scm: Rewrite to dispatch on all
	arguments.  This is only very marginally slower for the two
	argument case, and obviously a better behavior.

2003-07-05  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/h/generic.scm: Create file.  Mirrors syntax at
	e/generic.  This requires Swindle, and is actually slower than
	e/generic, though more correct.

	* share/scheme/e/generic.scm: Rename define-generic to
	define-method.  Write define-generic to take a signature only.
	Rewrite to use two argument dispatch if appropriate.  Rewrite to
	check method matches signature.  Does not support variable arity
	methods, does not support optioned methods, does not check method
	conflicts.
	
	* share/scheme/h/structure.scm: Create file and implement
	define-structure.  This implements both the PLT and the previous
	RSC name bindings for the constructor and the field mutators.
	This replaces the e/record.scm file, which is deleted.  Make
	required in tree changes.  This supports subtype structures.

2003-07-02  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/table.scm: Rename e/table-make to e/table-create.
	Also for e/cqueue, e/dequeue, e/ivector, e/routine, e/stack,
	e/queue.  Make required in tree changes.  The convention is
	'make-*' for fundamental constructors including for structures,
	and '*-create' for higher level procedures.

	* share/scheme/e/generic.scm: A one page implementation of single
	argument dispatch generic functions.  Types are written '<TYPE>'
	where the type predicate is 'TYPE?'.  Arguments are written '(NAME
	<TYPE>)'.  The implementation is very simple minded.

	* share/scheme/e/record.scm: Aborted renaming of constructor.  The
	constructor is 'RECORD-construct' not 'make-RECORD'.  The latter
	is the name bound by PLT's define-struct.  That also names the
	setters 'set-RECORD-FIELD!', this names them 'RECORD-FIELD-set!'.
	The problem is that the prefix gets messed up, make-e/table,
	set-e/table-FIELD!.  Maybe that is OK.

2003-07-01  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/envelope.scm: Write Env.bp, a co-ordinate based
	static envelope generator.

	* share/scheme/i/button.scm: Make all widget -set! procedures,
	including button, return the widget.

	* share/scheme/e/record-canonical.scm: Delete file.  Move syntax
	to e/record.scm.

	* share/scheme/e/lisp-listener.scm: Delete file.  This was not is
	use.

	* share/scheme/s/server.scm: Add host-address field to record, and
	initialize at s/server-create.

	* share/scheme/e/network.scm: Rename to spell host name host-name
	and to call the network representation the address.

	* src/scheme/high-precision-time.c: Delete unnecessary use of
	named variables when exporting procedures.

2003-06-29  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/h/posix.scm: Delete the 'posix-' prefix from all
	POSIX procedures.  Make required in tree changes.

2003-06-28  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/network.scm: Write e/hostname->integer and
	e/hostname-construct to translate between dotted notation IPV4
	host names and integers.

	* share/scheme/e/optioned-define.scm: Swap names of optioned
	procedures as generated by e/define:-rewriter, the colon suffix
	now names th *not* optioned procedure.  This is much clearer.  All
	in tree changes required by this are made, some fast paths may
	have been lost.

	* share/scheme/e/table.scm: Make e/table-make an optioned
	procedure, delete e/table-make:.

	* share/scheme/s/synthdef.scm: Write s/synthdef-send and
	s/synthdef-load as optioned procedures, not case-lambda.

2003-06-25  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/uspec.scm: Alter semantics of s/uspec-arity and
	s/uspec-usage to actually operate on USpecs, not UGen names.

	* share/scheme/s/unaryop.scm: Rename file from ugen-unaryop.scm.
	Likewise with s/ugen-binaryop.scm.

	* share/scheme/s/uspec-compile.scm: Create file, rename
	s/ugen-procedure-create to s/ugen-procedure and delete the file
	s/ugen-procedure.scm.

	* share/scheme/s/ugen-procedure.scm: Move all sole use procedures
	into s/ugen-procedure-create.  Delete files s/ugen-expansion.scm,
	s/ugen-muladd.scm and s/ugen-proxied.scm which implemented such
	procedures.

	* share/scheme/s/envelope.scm: Rename this file from
	s/ugen-envelope.scm, that file is deleted.

	* share/scheme/s/ugen-build.scm: Delete file, this procedure is
	now merged to s/uspec-compile.

	* share/scheme/s/parameter.scm: Merge functionality from
	s/control.scm, which file is deleted.  Edits to various files to
	use new names.

2003-06-24  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/uspec.scm: Split actual specifications into
	separate files, uspec-rsc.scm, uspec-sc3.scm and uspec-math.scm.

	* share/scheme/s/server-window.scm: Changes required by interface
	changes.

	* share/scheme/i/gauge.scm: Delete file.

	* share/scheme/i: Changes to all widgets to have the form (Widget
	Parent Width+Height Receiver) and to have a widget-set! method.
	The width and height are specified in pixels.

	* share/scheme/i/button.scm: Rewrite to take a width and height
	argument and to support an arbitrary number of states to cycle
	through.  This is closer to the SC3 button behavior.

2003-06-23  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/gauge.scm: Delete initial value argument.

	* share/scheme/i/fader.scm: Delete initial value argument.

	* share/scheme/i/button.scm: Write i/button-set! to set the button
	label.

	* share/scheme/i/entry.scm: Change i/entry to be fixed width
	specified by an integer number of characters.  

	* share/scheme/i/window.scm: Delete i/window-show, this is now
	done when the window is created.

	* share/scheme/i/cleanup.scm: Create file and implement i/cleanup.
	This replaces the i/window-cleanup-push! procedure, which is
	deleted.

	* share/scheme/i/switch.scm: Delete i/switch-status.

	* share/scheme/s/uspec.scm: Fix lost midWord capitals, introduced
	by previous rewrite.

	* share/scheme/s/ugen.scm: Merge in s/unit record type and related
	procedures.  The s/unit.scm file is deleted.  All references to
	unit are changed to ugen.

2003-06-18  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/option.scm: Delete file.  No existing uses.

	* share/scheme/e/random.scm: Change e/random-uniform to be an
	alias for random-taus88.

	* share/scheme/e/optioned-define.scm: Rewrite to evaluate default
	value, therefore the default value must be quoted if it is a symbol
	or a list of literals.  This allows for optioned higher order
	functions.  Changes to existing uses as required.

	* src/scheme/mouse-location.c: Rename exported procedure from
	mouse-location:get to mouse-location.

	* share/scheme/r/startup.scm: Create file and implement procedure.
	This procedure is called *after* the .rsc.scm file is read, but
	*before* the REPL is entered.  It builds the UGen procedures from
	the USpec table and starts the scheduler.

	* share/scheme/s/uspec.scm: Write s/uspec-compile, renamed
	procedure from ugen-build.scm file.  Make s/uspec-name an optioned
	procedure.  Changes to existing uses as required.

	* share/scheme/s/ugen-build.scm: Delete all procedures except
	s/ugen-build, which binds the three rate specialized UGen
	procedures.  Changes to existing uses as required.

	* src/scheme/random-taus88.c: Implement basic floating point
	random number generator as mzscheme extension.  The test file
	indicates this is only marginally faster than the current
	h/random-normal procedure.

	* share/scheme/s/disassemble.scm: Add pass six to disassembler for
	Nary use of Binary UGens, that is (Max a (Max b c) becomes (Max a
	b c).  Add pass seven to use quote for lists of literal numbers,
	that is (list 1 2) becomes (quote (1 2)).

2003-06-16  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/uspec.scm: Rename ugen-specification to uspec,
	file and variable names.  Put all SC3 uspecs into one list.
	Rename s/uspec-arity? to s/uspec-arity.  Change specification to
	write names as list if names are not equal.  There were no Specs
	written by hand that required this.

	* share/help/Examples/Dodge-and-Jerse.scm: Move the this file to
	Examples for Tutorials.

	* share/scheme/s/synthdef-declare.scm: Allow symbols as well as
	strings for synthdef names.

	* share/scheme/e/packet-engine.scm: Move packet engine out of h/
	to e/.

	* share/emacs/rsc.el: Rename all menu entries and user level
	commands.  Add all user level commands to menu.

	* doc/rsc.texinfo: Significant rewrite.

2003-06-12  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/optioned-define.scm: Improve definition of
	define:.  Implement qcol to 'quote car only of list'.  This is a
	first step towards allowing non literals as default arguments.
	This is not necessarily a good idea.

	* share/emacs/rsc.el: Implement rsc-manual-help-directory to open
	the RSC help directory and
	rsc-evaluate-and-draw-expression-before-point to draw the
	expression before point.

	* share/scheme/s/dot.scm: Simplify s/dot-graphdef-file so that it
	accepts a graphdef record and writes to the correctly named file.

	* share/scheme/s/synthdef.scm: Rewrite s/synthdef-play and
	s/synthdef-draw to use s/as-graphdef.

	* share/scheme/s/graphdef.scm: Write s/as-graphdef.

2003-06-10  Rohan Drape  <rohan@henri.localdomain>

	* share/emacs/rsc.el: Required fix for below changes to
	rsc-evaluate-and-play-expression-before-point.

	* share/scheme/s/ugen.scm: Delete s/ugen-encode.

	* share/scheme/s/graphdef.scm: Implement s/graphdef-encode and
	s/graphdef-decode.

	* share/scheme/s/synthdef.scm: Various changes to support the
	simplifications mentioned below.  This changes the semantics of
	some procedures and deletes others.  The new semantics are that a
	synthdef is a graphdef, or a string that can be used to acquire a
	graphdef.  The name of a graphdef should normally correspond to
	the name of the file it is stored in.  Thus s/synthdef-write does
	not require a name or filename argument.

	* share/scheme/s/synthdef-declare.scm: Implement s/synthdef to
	transform a lisp `synth declaration' into a graphdef record.  This
	is the basic declaration handler.

	* share/scheme/s/builddef.scm: Implement s/builddef->graphdef.
	This replaces s/builddef-write and associated procedures, which
	are deleted.  There was an unnecessary duplication of work.

	* share/scheme/s/constant.scm: Fix to set constant index at
	commit, this was set during the build output stage, which was not
	a good design.

2003-06-09  Rohan Drape  <rohan@henri.localdomain>

	* share/help: Fair number of additions and fixes.

	* share/scheme/s/ugen-muladd.scm: Fix error in MulAdd
	implementation.  Shows how rarely I use Add syntax.

	* share/scheme/s/ugen-specification.scm: Fix error in Impulse
	entry.

	* share/scheme/s/graphdef.scm: Delete
	s/graphdef-format-calculation-rate and references to that.

	* share/scheme/s/ugen-compound.scm: Implement DelayWr and Tap
	aliases, as posted to sc-dev by JMcC.

	* share/scheme/r/sound-file.scm: Implement sound-file:write: as
	optioned interface to sound-file:write.  Write tests for reader
	and writer.

	* src/scheme/sound-file.c: Implement sound_file_write to write
	float vectors to a sound file.  This is useful for generating
	wave tables for SC3 oscillators.  Implement sound_file_read to read
	float vectors from a sound file.

2003-06-08  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/h/regular-expression.scm: Create file and define
	h/regexp-match as a basic regular expression matcher.

	* share/scheme/e/list.scm: Write e/list-read and e/list-write.
	These are extracted from the s/graphdef.scm file, which is edited
	to use the new names.

	* doc/rsc.texinfo: Basic cleanup to remove irrelevant music-l
	notes.  Cleanup of synthdef file description.

	* share/emacs/rsc.el: Modify font lock code to make UGen names and
	math operators case sensitive.  The solution is to make *all* font
	locking case sensitive, which is fine by me, but there may be a
	cleaner solution.  

	Add support for .ir names in help lookup.

	* share/scheme/s/server-options.scm: Rename as follows:

	        s,s/server-options-get-value,s/server-options-get,g
	      	s,s/server-options-set-value!,s/server-options-set!,g

	* share/scheme/h/packet-engine.scm: Make new implementation that
	selects either TCP or UDP as the actual transport mechanism.

	* share/scheme/h/udp.scm: Create file and implement equivalent
	interface to that at tcp.scm over udp.

	* share/scheme/h/tcp.scm: Create file and move previous
	packet-engine implementation here.

	* share/scheme/s/server-local.scm: Rename file and procedures from
	server-henri.  The new names are consistent with SC3.

	* share/scheme/s/server.scm: Add use-tcp field to record, default
	value is #f.

	* share/scheme/h/thread.scm: Add h/semaphore-wait-w/timeout.

2003-06-07  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/list.scm: Rename e/map-w/index, was
	e/map-with-index.  The new name is consistent with other names.

	* share/scheme/s/disassemble.scm: Add passes three four and five.
	Pass four rewrites follows multiple channel expansion paths as
	far back as possible.  Passes three and five combine to support
	the Mix language UGen.  Further cleanup and basic test cases.
	Implement proper root unit search, though handle only graphs with
	single root unit.

2003-06-05  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/disassemble.scm: Add second pass to rewrite all
	Mul and MulAdd UGens using standard syntax.  General cleanup, some
	useful procedures exported to other files.  Pass three still
	required.

	* share/scheme/s/ugen-specification.scm: Write
	s/ugen-specification-arity? to determine the input arity of a
	UGen.

	* share/scheme/s/graphdef.scm: Add accessors for individual
	graphdef elements, the procedures are s/graphdef-unit-ref,
	s/graphdef-parameter-ref and s/graphdef-constant-ref.

	* share/scheme/s/ugen-math.scm: Fix to remove all references to,
	and dependencies, on the Op prefix for operator names.  These were
	not used and made life difficult.

	* share/scheme/s/synthdef.scm: Delete s/synthdef-parameters.

2003-06-04  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/disassemble.scm: Create file and write draft of
	s/graphdef-disassemble.  This is a very rough first pass at the
	problem, and needs a great deal of work, but it does make a
	playable version of the tradition bubbles example.  Eventually
	should address expansion syntax.

	* share/help/UGens/Panners/LinPan2.help.scm: Create file. Also
	Pan2.help.scm.

	* share/scheme/s/unit.scm: Move s/unit-user-name from dot.scm.

	* share/scheme/s/synthdef.scm: Move s/synthdef-dot and
	s/synthdef-draw from dot.scm.

	* share/scheme/m/schedule.scm: Rewrite to use the e/pqueue
	implementation.

	* share/scheme/e/pqueue.scm: Create file and move the
	implementation of the priority queue from m/schedule.scm to here.
	This is preliminary work towards supporting separate tempo based
	schedulers, which will need independent priority queues to the
	scheduler.

2003-06-03  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/emacs.scm: Create file and write
	e/emacs-font-lock-constants.  This procedure is used to generate
	font lock regular expressions for use in Emacs code.

	* share/scheme/s/ugen-unaryop.scm: Change to use list as base
	element, not vector.  Rename to s/unaryop-names.  Write
	s/unaryop-name.  Write s/unaryop-emacs-font-lock-string.
	Equivalent changes at ugen-binaryop.scm.

	* share/emacs/rsc.el: Fix so as to not font lock the word linear,
	for example.  That is to escape the period.  Add font lock for all
	Unary and Binary OpUGens.  Add font lock for define: and
	e/define-record-type-canonical.  Spell font lock correctly,
	ie. font-lock not fontlock.

	* share/scheme/s/dot.scm: Add support for naming unary and binary
	math OpUGens.

	* share/scheme/s/byte.scm: Create file.  This now holds the SC
	specific binary input and output procedures.  These were formerly
	at s/graphdef.scm and have been renamed by the sed(1) script
	below.
	
		s,s/graphdef-read-integer,s/integer-read,g
		s,s/graphdef-write-integer,s/integer-write,g
		s,s/graphdef-read-float,s/float-read,g
		s,s/graphdef-write-float,s/float-write,g
		s,s/graphdef-read-pascalstring,s/pascal-string-read,g
		s,s/graphdef-write-pascalstring,s/pascal-string-write,g
	
	* share/scheme/s/synthdef.scm: Delete s/synthdef-path-append!.

	* share/scheme/s/graphdef.scm: Many changes to this file.  Create
	new files input.scm, output.scm, parameter.scm, unit.scm and move
	record defintions to appropriate files.  Update rsc.scm as
	required.  Fix all naming to be consistent with other general
	naming conventions.  Replace all uses of vectors with lists.  
	
	Enforce a one Synth Definition per file policy, deleting the
	synthdef record type, and making a graphdef the only lisp level
	representation.  A special library set of procedures could be
	written to handle such files if that is required.
	
	The renaming includes but is not limited to the following sed(1)
	script.
	
		s,s/graphdef-read-inputspec,s/input-read,g
		s,s/graphdef-write-inputspec,s/input-write,g
		s,s/graphdef-display-inputspe,s/input-display,g
		
		s,s/inputspec-unitindex,s/input-unit-index,g
		s,s/inputspec-outputindex,s/input-output-index,g
		
		s,s/graphdef-read-outputspec,s/output-read,g
		s,s/graphdef-write-outputspec,s/output-write,g
		s,s/graphdef-display-outputspec,s/output-display,g
		
		s,s/outputspec-calcrate,s/output-calculation-rate,g
		
		s,s/graphdef-read-paramspec,s/parameter-read,g
		s,s/graphdef-write-paramspec,s/parameter-write,g
		s,s/graphdef-display-paramspec,s/parameter-display,g
		
		s,s/paramspec-construct,s/parameter-construct,g
		s,s/paramspec-name,s/parameter-name,g
		s,s/paramspec-index,s/parameter-index,g
		
		s,s/graphdef-read-unitspec,s/unit-read,g
		s,s/graphdef-write-unitspec,s/unit-write,g
		s,s/graphdef-display-unitspec,s/unit-display,g
		
		s,s/unitspec-unitname,s/unit-name,g
		s,s/unitspec-calcrate,s/unit-calc-rate,g
		s,s/unitspec-specialindex,s/unit-special-index,g
		s,s/unitspec-inputspecs,s/unit-inputs,g
		s,s/unitspec-outputspecs,s/unit-outputs,g
		
		s,s/graphdef-graphname,s/graphdef-name,g
		s,s/graphdef-initcontrols,s/graphdef-parameter-defaults,g
		s,s/graphdef-paramspecs,s/graphdef-parameters,g
		s,s/graphdef-unitspecs,s/graphdef-units,g
		
		s,s/ugen-inputspec-vector,s/ugen-make-input-vector,g
		s,s/ugen-outputspec-vector,s/ugen-make-output-vector,g
		
2003-06-02  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/table.scm: Edit to use hash codes for table
	lookup.  Make optioned version of e/table-make.  Edit all uses of
	e/table-make.  These changes make key export impossible, however
	that was never used for anything important anyway.  They also mean
	that the *-record lookup is only useful internally.

	* share/scheme/s/builddef.scm: Initialize s/builddef-current to an
	anonymous builddef instead of void.

	* share/scheme/h/hash.scm: Create file and add basic hash
	operations.  Also create test file.

2003-05-31  Rohan Drape  <rohan@henri.localdomain>

	* share/emacs/rsc.el: Add font locking for UGen names.

	* share/scheme/s/ugen-assistants.scm: Fix misnamed Mix.Fill, now
	named Mix.fill.  Write KeyStateInteger procedure to assist the
	KeyState UGen.

	* share/emacs/rsc.el: Extend rsc-manual-source to find record
	definitions when an accessor or setter function is searched for.

	* share/scheme/e/sequence.scm: Write e/sequence-ref and
	e/sequence-set!.

	* share/scheme/s/synthdef.scm: Write s/synthdef-parameters.

	* src/plugins/RFreezer.cpp: Add cast in RFREEZER_GET_BUF macro to
	avoid compiler warning of signed and unsigned comparison.

	* share/scheme: Create separate files for all syntax definitions.
	Make required changes to rsc.scm.

	* src/plugins/RXTerminal.cpp: Delete file.  This has been merged
	into the mainline SC3 sources.  Delete also the associated help
	files.

	* share/scheme/s/ugen-specification.scm: Add DecodeB2.

	* share/help/Examples/Scheduler.help.scm: Create file and
	implement granular synthesis example posted to sc-users by JMcC.

	* share/scheme/s/buffer.scm: Make s/buffer-alloc optioned.

	* share/help/UGens/FFT/FFT.help.scm: Create file and implement
	examples from SC3 distribution.

2003-05-27  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/ugen-build.scm: Add support for .ir rate UGens at
	s/ugen-build+bind-w/rate-suffixes.

	* share/scheme/s/server-options.scm: Add option for random seeds.

	* share/scheme/s/ugen-specification.scm: Add support for Terminal
	UGens, ie. Mouse*.  Also add help files.  Add FFT UGens.  Add
	DetectSilence UGen.  Add non buffer info UGens.  Add VOsc UGens.
	Add Vibrato UGen.  Add new noise UGens.  Add new Panner UGens.
	Add PSinGrain UGen.  Add new trigger UGens.

	* configure.ac: Fix X11 checks.  

2003-05-26  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/test: Rationalize tests.  Move relevant parts to
	UGen help files, and to Examples directory at help.  The tests are
	not complete, but are no longer badly out of date.
	
	* share/scheme/e/list.scm: Fix e/list-expand to handle '() as
	input.  (Was diverging.)

	* share/scheme/s/ugen.scm: Rewrite to make multi-channel expansion
	be list and not vector based.  The vector form was inherited from
	music-l, and caused various difficulties, and offered no
	advantages.  This change involved many edits to many files, and
	breaks all previous synthdef declaration that involve MCE. All
	files below share/help have been modified to reflect these
	changes.

2003-05-25  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/sequence.scm: Create file, write
	e/sequence-length, move e/list-form to e/as-list, write
	e/as-vector.

	* share/scheme/s/ugen-compound.scm: Fix error in implementation,
	reported on sc-dev re SC3 version.

	* share/help/Examples: Create directory and start implementing
	various SC2 examples.

	* share/help/UGens: Create Controls sub-directory, write various
	help files.  Start unifying format.  Introductory comments have
	three semicolons, comments on examples two, and inline comments
	one.  The usage is not given, since it is available at scheme,
	this should have a proper emacs interface however.
	
	* share/scheme/s/ugen-assistants.scm: Fix error in sequence length
	determination, used list length procedure.

2003-05-22  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/group.scm: Fix error in s/group-new declaration.

	* CVS: Import to local CVS repository.  

	* configure.ac: Further name changes.  Change source to src, and
	build to share.  Change this file to reflect that.  Increment
	version number to 0.5, mainly due to the name changes yesterday
	and today.

	* share/emacs/rsc.el: Write rsc-manual-source-update.  

2003-05-20  Rohan Drape  <rohan@henri.localdomain>

	* configure.ac: Rename parts of the directory structure.  Make
	changes to this file to reflect that.  Add .cvsignore files, with
	the intention of moving to CVS in the near future (ie. before
	release).  This means fixing broken naming schemas, as that is a
	big nuisance after it is in CVS.  Fix Makefiles for correct
	maintainer clean operation.

	* share/emacs/rsc.el: Write rsc-manual-help procedure, searches
	the shared data directory for a help file, and opens any located
	files.  Also rename source file lookup to rsc-manual-source, and
	change keybindings, to C-cC-c for source |c|ode, and C-cC-h for
	the |h|elp file.  Also extend source lookup to drop trailing
	hyphens to allow searches for struct accessors.  This is not a
	proper solution, should recurse until the base word is reached,
	but it works most of the time.

2003-05-19  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/measure.scm: Create file and implement record type
	and m/tempo-measure-schedule.  This allows scheduling in relation
	to a measure.

	* share/scheme/m/tempo.scm: Add pulse counter to tempo record.  Fix
	errors at m/tempo-repeater that resulted in scheduling always
	against the thread parameter, never against a local tempo.

	* share/scheme/e/file.scm: Delete aliases for host procedures.

	* share/scheme/e/directory.scm: Delete aliases for host procedures.

	* share/scheme/e/link.scm: Fix error in the e/link-walk procedures.

	* share/scheme/h/random.scm: Add h/random-seed.

	* share/scheme/e/record.scm: Create file and write
	e/define-record-type-canonical.  This macro builds SRFI type
	records with all names derived from the record name and field
	names using standard rules.  Change all instances of
	define-record-type to use this, all except those at e/table and
	e/link already used this naming schema.

2003-05-18  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/dequeue.scm: Fix error in e/dequeue-empty?.

	* Makefile.am: Fix the installation of the share subdirectories,
	the former behavior stored the share directory itself below
	PREFIX/share/rsc.

	* share/scheme/r/resolve.scm: Create file and write r/resolve.  This
	replaces the files build.scm and library.scm, which are deleted.
	The r/resolve procedure searches along the path r/resolve-path,
	which is a global and may be set by the user.

	* share/emacs/rsc.el: Rewrite rsc-manual-rsc to drop any trailing
	colon before looking up a symbol.

	* share/scheme/e/optioned.scm: Write e/define: syntax to make
	writing optioned procedures simpler.  This is a lisp rewriter eval
	type macro.

	* share/scheme/s/ugen-build.scm: Add (interaction-environment) to
	instances of eval.

2003-05-17  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RXTerminal.cpp: Fix to store width and height as
	reciprocal floating point values, this to bring into line with SC3
	ugens.

	* share/scheme/s/osc-responder.scm: Simplify implementation.  Delete
	record definition.  Force the OSC command to be given as a string,
	move symbol coercion to server-send+wait.

	* share/scheme/s/node.scm: Add comments describing the possible
	thread context of the cleanup handler.

	* share/scheme/s/server-send.scm: Add test to s/server-send+wait
	that ensures that it is not invoked in the context of the server
	packet engine thread.  This is slow, but stops subtle errors.
	Once the behavior is well enough documented and stable this test
	should be removed.

	Write procedure s/server-send+wait-w/synchronous-flag and add
	synchronous arguments to user level procedures that invoke
	send+wait.  This is to allow users to avoid deadlock when a server
	command executed in the thread context of the server packet engine
	starts a wait on a return OSC message.  (The semaphore caching
	mentioned below was not the problem, it was a conceptual error, it
	was in fact the debug printouts that made it work.)

2003-05-13  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/e/random-node.scm: Create file.  The implementation
	is from the comp.lang.scheme list, by Oleg Kiselyov, it is in the
	public domain.

	* share/scheme/e/warp.scm: Move warp.scm from s/ to e/.

	* share/scheme/i/number-editor.scm: Modify to use a warp procedure
	rather than separate forwards and reverse transforms.

	* share/scheme/m/spatial-interpolator.scm: Create file and implement
	m/spatial-interpolator-create.  
	
2003-05-12  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/fader.scm: Fix so that extent does in fact set the
	pixel resolution of the fader.  Likewise for slider.scm.

	* share/scheme/i/point.scm: Changed visual semantics slightly.  The
	point is not draw when in use, and there is instead an in use
	cursor, a cross hair.  

	* share/scheme/e/math.scm: Write e/hypotenuse and
	e/hypotenuse-approximate.

	* share/scheme/e/geometry.scm: Create file and write e/distance.

	* share/scheme/s/server-notification.scm: Change s/server-notify to
	wait for /done message.

	* share/scheme/s/node.scm: Write s/node-query.  Write s/node-trace,
	this was formerly only available to synths.  Write synth and group
	aliases.

2003-05-08  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/warp.scm: Create file and write all warps given in
	the SC class file Common/GUI/ControlModel.sc.

	* share/scheme/s/server.scm: s/server-send+wait now caches the
	semaphore it uses.  This fixes a subtle error that stopped the
	s/buffer-free procedure from working in the context of a node
	cleanup stack.

	* share/scheme/s/server-notification.scm: Create file and move
	notification related procedures out of server.scm.  Also create
	files server-boot.scm, server-henri.scm, server-send.scm,
	server-connect.scm and server-identifier.scm and put appropriate
	procedures into each file.

	* share/scheme/s/server-options.scm: Rewrite to use a simple list
	rather than a record type.  Make necessary changes to server.scm.

2003-05-06  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/server-window.scm: Add support for CPU peak and
	average displays.

	* share/scheme/s/root-node.scm: Simplify implementation.

	* share/scheme/s/server.scm: Add node-table to server record, and
	write associated procedures, including the /n_end message handler
	s/server-notification-start.  Delete node-watcher.scm file.

	* share/scheme/s/node.scm: Simplification of record.  Delete all
	non-essential book keeping.  Make required changes to group.scm
	and synth.scm.

2003-05-05  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/point.scm: Create file and implement widget.  This
	is a very simple two dimensional slider type object.

	* src/plugins/RXTerminal.cpp: Create file and implement
	RMouseX, RMouseY, RMouseButton and RKeyState UGens.  These are
	identical to the SC UGens, but written for X11.  These UGens
	*require* that the scsynth executable be linked against the X11
	libraries.

2003-05-04  Rohan Drape  <rohan@henri.localdomain>

	* configure.ac: Increment version number to 0.4.  This mainly due
	to significant renaming, and to significant changes to interface
	section.

	* share/scheme/s/node-watcher.scm: Rename file. Make naming
	consistent.  Also for the files: server-window.scm,
	server-options.scm, root-node.scm, output-proxy.scm and
	osc-responder.scm.

	* share/scheme/s/ugen-procedure.scm: Move all helper procedures into
	actual procedure.

	* share/scheme/s/ugen-expansion.scm: Move all helper procedures into
	actual procedure.

	* share/scheme/e/vector.scm: Add e/vector-expand procedure.  This
	was written for the SC multi channel expansion, but is generally
	useful.

	* share/scheme/s/ugen-proxied.scm: Delete duplicate definitions of
	expansion procedures defined in s/ugen-expansion.scm.

	* share/scheme/s/buffer.scm: Rename s/buffer-new to s/buffer-alloc.
	This is to mirror sclang, which changed the name of this.

	* share/scheme/i/number-editor.scm: Rename procedures.  Require
	forwards and reverse transformations.

2003-05-03  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/file-system.scm: Rename file.

	* share/scheme/e/file-type.scm: Rename file. Make naming consistent.
	Fix character set and errors list accessor errors.

	* share/scheme/e/lisplistener.scm: Rename file. Make naming
	consistent.  Fix implementation and create test file.

	* share/scheme/e/resource-id.scm: Rename file. Make naming
	consistent.  Also for: file-name.scm. 
	
	* share/scheme/h/procedure.scm: Delete h/procedure-documentation.
	Emacs lisp style documentation is deprecated.

	* share/scheme/h/file.scm: Delete h/directory-separator, we assume a
	UNIX filesystem.  This is not the correct way to generalize this.

	* share/scheme/h/byte-string.scm: Rename file.  Force all scheme files
	to use h/ prefix for these procedures.

	* share/scheme/h/case-sensitive.scm: Rename file.

	* share/scheme/h/packet-engine.scm: Rename file.  Make naming
	consistent.

	* share/scheme/s/server.scm: Delete s/server-boot+connect.  Change
	error behavior for s/server-boot.  Make naming consistent.

2003-05-01  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/window.scm: Write i/window-retrieve procedure to
	fetch the top level window of an arbitrary widget.

	* share/scheme/i/entry.scm: Create file and implement widget.

	* share/scheme/i/slider.scm: Make slider horizontal only and move
	vertical implementation to fader.  This is necessary to correctly
	support a 'set' method.

	* share/scheme/i/fader.scm: Create file and implement fader.  A
	fader is a vertical slider that shows lower values lower on the
	screen than higher values.

	* share/scheme/e/model.scm: Rename m/controller file.  Write
	e/model-unsubscribe and e/model-clear-subscribers procedures.

2003-04-28  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/i/switch.scm: Fix error, creator was not returning
	object.

	* share/scheme/m/controller.scm: Create file and write initial
	implementation.  This file implements the basic MVC semantics.
	This is poorly named as it is the Model part of MVC.

	* share/scheme/i/slider.scm: Write i/slider-set!.  This does not
	affect the associated display, to do so requires further
	book-keeping.  This would also allow the set! value to be in the
	output range rather than the integer literal.

	* share/scheme/r/build.scm: Write r/build-file-name procedure.

2003-04-27  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/midi-file.scm: Change definition of midi event to
	not include the delta time.  Define a track event to be a delta
	time, midi event duple.

	* share/scheme/m: Delete midifile-* files. These were obsolete.

	* share/scheme/m/midi-receiver.scm: Rename file. Change all names to
	use hyphens to separate words.

	* share/scheme/m/midi-engine.scm: Rename file. Change all names to
	use hyphens to separate words.

	* share/scheme/m/midi-time.scm: Rename m/midi-qpm-to-tempo to
	m/midi-qpm-to-tempo-meta-event.  Write inverses for above and
	m/midi-delta-ticks-to-seconds.

	* share/scheme/m/open-sound-control.scm: Rename file.

	* share/scheme/e/optioned.scm: Extend e/optioned-rewrite to allow
	default arguments to not be specified.

2003-04-26  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RLoopSet.cpp: Add optimizations possible due to
	static loop data, ie. store 'left' and reset phase only.
	Reinstate global left and right inputs but at initialization rate.

2003-04-25  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/ugen-specification.scm: Add specifications for
	RDelayMap and RLoopSet.

	* src/plugins/RLoopSet.cpp: Implement UGen.  This is a relation
	of the RFreezer UGen.

	* src/plugins/RFreezer.cpp: Implement phase randomizer.  This
	had been outlined but not implemented.

	* src/plugins/RDelayMap.cpp: Create file and implement UGen.
	This is a port of the 'adm' UGen from music-l.  Create also the
	help file and implement some examples from the Gardner thesis.

2003-04-15  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/ugen-specification.scm: Write the procedures
	s/ugen-specification-fetch and s/ugen-specification-usage.  The
	latter gives a list that describes the inputs to the UGen in a
	concise form.

	* share/help: Add directory structure to mirror SC3.  Continue
	adding help files.
	
	* share/emacs/rsc.el: Added keybinding for evaluate region
	command.

	* share/scheme/s/buffer.scm: Write optioned version of
	s/buffer-cue-soundfile.

	* share/scheme/s/ugen-compound.scm: Create file and write
	PingPong.ar.

	* share/scheme/e/vector.scm: Write e/vector-rotate.

	* share/scheme/s/synthdef.scm: Modify s/synthdef-rewriter to allow
	arguments to specify vectors as initial arguments.

	* share/scheme/s/control.scm: Write the procedure
	s/control-create+commit-handle-vectors.  This allows synthdef
	declarations to specify arguments as vectors.  

	* share/scheme/e/list.scm: Write e/list-form procedure.

	* share/scheme/s/ugen-assistants.scm: Modify Klang.spec and
	Klank.spec to allow arguments as lists or vectors.

2003-04-14  Rohan Drape  <rohan@henri.localdomain>

	* configure.ac: Add substitution variable for PLT_DIRECTORY.  This
	is presently hard coded.  Fixed scheme extension Makefile.am to
	use this.  Add X11 tests for mouse location scheme extension.
	There is no need to link the library against X, the MrEd
	executable is known to be so linked.

	* share/help: Start writing UGen help files.  The examples and
	text are from the SC3 distribution, rewritten as necessary.

	* share/scheme/s/buffer.scm: Write s/buffer-sine1 and optioned
	variant.

	* share/emacs/rsc.el (rsc-evaluate-and-play): Write procedure.
	This rewrites the expression at point to include an Out.ar UGen
	and to invoke the s/synthdef-play syntax.

	* share/scheme/e/sxml.scm: Create file and write the procedure
	e/sxml:child-by-name.  This file is for generally useful sxml
	operations.

2003-04-13  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RFreezer.cpp: Delete inputs for individual loop
	descriptors.  Simplify implementation, add reset if group right is
	left of loop right.  This change required alignment of group right
	value.  Copy previous version to RLoopSet.cpp.

	* share/scheme/e/time-ntp.scm: Create file, move all NTP related
	procedures from time.scm to this file.  Update test files.
	Require accurate make-time procedure (PLT had been broken in this
	regard).

2003-04-08  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/r/library.scm: Write r/library-directory to find
	shared library file directory.  This is because architecture
	dependent files are not supposed to live with architecture
	independent files, therefore not at build, which is at share.

	* src/scheme/Makefile.am: Change installation directory to
	$(pkglibdir).  Edit scheme files to load from there also.

	* share/scheme/r/build.scm: Rewrite r/build-directory to not rely on
	rsc binary.

	* share/scheme/h/posix.scm: Write h/posix-rename procedure.

	* share/scheme/e/routine.scm: Create file and write e/routine-make.
	This is a simple coroutine constructor, creates a dispatch
	accepting the methods 'next' and 'reset'.  This is close to the
	SC3 routine interface.

2003-04-07  Rohan Drape  <rohan@henri.localdomain>

	* README: Write install instruction for pre-release packages.

	* Makefile.am: Write distributor and installer for the share
	directory.

	* configure.ac: Delete dependency on X11 libraries. 

	* share/emacs/rsc.el: Write rsc-find-build-directory procedure and
	use instead of the shell command 'rsc directory' to set the
	variable rsc-directory.

	* src/plugins/Makefile.am: Delete erroneous _LIBADD directives.
	Delete erroneous link requirement to librsc.la.

	* src/rsc: Delete directory and all contents.  After deleting
	the midi related work this command only provided the location of
	the share directory, and that only to the emacs lisp mode source.
	Update parent Makefile.am.  Update configure.ac.

	* src/common: Delete all midi related C files, this includes
	the file reader and writer.  Delete all X display related
	files. Delete Makefile.am, the library was erroneous.  Update
	parent Makefile.am to ensure directory is included in
	distribution.  Update configure.ac.

2003-04-06  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/synthdef.scm: Write s/synthdef-declaration.  This
	is to formalize the lisp expression that declares a synthdef.
	
	* share/scheme/m/midi-time.scm: Create file and write
	m/midi-ticks-to-seconds and m/midi-qpm-to-tempo.

	* share/scheme/m/midi-bytes.scm: Create file and move all byte
	related procedures here.  Write m/midi-uncombine-value and
	m/midi-integer-to-byte-list.

	* share/scheme/m/midi-event.scm: Create file and write basic type
	predicates.

	* share/scheme/m/midi-constants.scm: Create file and define
	constants.

	* share/scheme/e/byte.scm: Write e/write-byte and
	e/byte-string->integer-list.
	
2003-04-04  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/midi-file.scm: Write m/midi-file-write, a scheme
	midifile writer.

2003-04-03  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/midi-file.scm: Create file and write
	m/midi-file-parse, a scheme midifile reader.  This is to scrap the
	messy C files and the messier still text file conversion.

	* src/common: Various fixes.  Removed double variants for most
	signal processing procedures.  Reduced dependencies for many
	files.  Started working out what can be safely deleted.  Inlined
	most signal processing procedures.

2003-03-30  Rohan Drape  <rohan@henri.localdomain>

	* src/common/e-quantize.c: Create file and write e_quantize.

	* src/plugins/RShuffler.cpp: Add IOT and READ_INCREMENT
	quantizer inputs.  These inputs provide a 'quanta' value if
	greater than zero, to which the IOT and READ_INCREMENT are
	rounded.  Fix envelope type conversion error.

2003-03-27  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RFreezer.cpp: Fixes to design and implementation.
	The fixed right value slows responses to changes in group left and
	right values.  This needs further work.

	* share/scheme/r/build.scm: Create file and write r/build-directory.
	This may not be required, most file lookup is in the emacs code.
	
2003-03-26  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RFreezer.cpp: Create file and write UGen.  This
	is an adaptation of the music-l frz UGen.  

	* src/scheme/Makefile.am: Cleaned to no longer require MZC,
	instead to use the standard mechanisms.  There is still the
	problem of determining the PLT include path an the mzdyn dynamic
	link object.  It will also require work when the actual share
	directory location problem is decided on.  This does however allow
	autogen.sh to be fixed, which it is.

2003-03-25  Rohan Drape  <rohan@henri.localdomain>

	* autogen.sh: Create file.  This is the version that is
	distributed with jack.  The automake process is broken at
	src/scheme/Makefile.am and should be fixed.

	* src/plugins/RDelaySet.cpp: Added a pass through for when the
	RTAlloc call fails.  I do not know the semantics of C++ try/catch,
	should ensure this does not overwrite the existing handler at
	SC_CoreAudio.

	* configure.ac: Added compiler optimization and warning flags.
	Fixed mzc substitution variable and used in scheme/Makefile.am.

	* src/common/m-segment-transfer.c: Delete text name
	interpolator lookup function .  Delete procedural interpolator
	argument.  To support other interpolators put _core lookup into a
	separate file and use #defines to set the interpolator lookup,
	which should be a static inline (ie. a macro).

	* share/scheme/e/optioned.scm: Changed syntax so that options are
	specified as lists not cons cells.  This allows specifications to
	store further relevant information in option lists, in particular
	for synthdef declarations to provide minima and maxima values for
	use by an interface constructor, and likewise for ugen
	specifications.  This change involved changing all optioned
	procedure declarations and may have introduced some errors.

2003-03-24  Rohan Drape  <rohan@henri.localdomain>

	* configure.ac: Add POSIX shared memory requirement.  This is now
	a Jack dependency.

	* share/scheme/s/server.scm: Add latency field to server record.
	This is required to synchronize multiple SC servers, or more
	importantly an SC server with some other physical device with a
	known latency, the QRS piano player for example.

	* src/plugins/RShuffler.cpp: Add minor optimizations for slot
	allocation and grain generation.

	* src/common/m-signal.c: Split into separate files for
	interpolate and circular queue procedures.  Rename everything to
	have m_ prefix.  Rename all uses of _real to _double.

	* src/common/e-random.c: Use SC3 implementation of the
	generator of L'Ecuyer.  Delete double precision functions.

2003-03-23  Rohan Drape  <rohan@henri.localdomain>

	* src/plugins/RSampleRateDistortion.cpp: Create file and
	implement UGen.  This is a port of the music-l dsr UGen.

	* src/plugins/RBitDepthDistortion.cpp: Create file and
	implement UGen.  This is a port of the music-l dbr UGen.

	* src/plugins/RDelaySet.cpp: Create file and implement UGen.
	This is a port of the music-l kly UGen.  Uses RT memory, which by
	default is in short supply.  A buffer based version would probably
	be a good idea.

2003-03-22  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/midireceiver.scm: Rewrite m/midireceiver-register
	to take status byte in one piece, not split into major and minor
	parts.  That was never a good idea.  Added new status test
	criteria, for lists and cons cells.  The test is now canonicalized
	at registration time.  This makes the dispatch faster, note that
	'm/midireceiver-unregister' now does not allow consideration of the
	status test, since unless it was already a procedure it is not
	known.

	* share/scheme/m/midiengine.scm: Rewrite m/midiengine-reader to
	support new midireceiver semantics, which see above.  Some small
	optimizations.

2003-03-20  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/m/schedule.scm: Define *m/schedule-rear* variable and
	rewrite m/schedule to use it to optimize insertions at the rear of
	the schedule.  This avoids traversing the entire schedule for the
	common case of adding an entry later than the one just added.

2003-03-19  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/synth.scm: Write s/synth-trace.

	* share/scheme/m/schedule.scm: Define *m/scheduler-elide* variable
	and rewrite m/schedule to use it and to make other optimizations.
	This is now reasonably efficient given the basic list structure of
	the schedule, mred shows zero (0.0%) CPU activity when scheduling
	5-10 events per second.  Remove m/schedule-delete.  The elision
	destroys the procedure identity.  This was never a useful
	operation anyway.  m/schedule-clear still works.

2003-03-18  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/h/bell.scm: Create file and write h/bell to ring
	console bell.  Useful for interface tests where line prints can
	take time to appear due to caching.

	* share/scheme/i/list.scm: Create file and write i/list procedure.
	This is the basic single selection list interface object.

2003-03-17  Rohan Drape  <rohan@henri.localdomain>

	* share/emacs/rsc.el: Write rsc-manual-rsc procedure to lookup RSC
	symbol using the share/scheme/TAGS file.  This is preferable, in my
	opinion, to a static manual.  And if the libraries are in a read
	only location it is safe also.

	* share/scheme/m/schedule.scm: Changes to support new semantics for
	highprecisiontime.  In particular the scheduler is now a thread
	that indefinitely waits on a semaphore posted to when the timer
	elapses.  The scheduler will do nothing until m/schedule-start is
	evaluated.  That procedure raises an error if called when the
	thread is active.

	* src/scheme/highprecisiontime.c: Rewrote to avoid calling
	anything other than scheme_post_sema from the interrupt.  This
	makes the behavior much more stable but there may still be some
	difficulties.  Before calling highprecisiontime:settimer it is
	necessary to call highprecisiontime:setsemaphore, however this
	need only be called once.  The changes here required changes to
	the scheme scheduler, of which see above.

	* src/plugins/RShuffler.cpp: Changed resolve syntax for
	controls to (_Left, _Right) from (_Left, _Left+_RightExtent).
	Patched historical expectation of a guard point at the buffer.

	* share/scheme/s/ugen-math.scm: Write the procedure
	s/ugen-math-build-generic-unary-math-operators.  This is the unary
	generic math builder.

	* share/scheme/e/vector.scm: Extend e/vector-tabulate to accept
	either zero or one argument procedures.

	* share/scheme/s/ugen-assistants.scm: Write Mix.Fill as idiom over
	e/vector-tabulate.

	* share/scheme/s/synthdef.scm: Allow synthdef-play to optionally
	provide a name.  Fix all extra quoting errors in syntax option
	handling.

	* share/scheme/s/node.scm: Document the timing of the execution of
	node cleanup stack.  It is not clear that this is correct.

	* share/scheme/s/ugen-specification.scm: Added Compander UGen
	specifications.

2003-03-16  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/ugen-math.scm: Create file and write
	s/ugen-math-build-generic-binary-math-operators.  This creates and
	binds generic binary math operations.  The bindings are made from
	a correspondence table.  These operators are UGen assistants, that
	is they are for use within a SynthDef constructor.  The operators
	determine the UGen calculation rate from the input signals at each
	stage.  The Mix procedure is now a simple idiom over the generic
	Add procedure.

	* share/scheme/s/ugen-assistants.scm: Write Mix to replace Mix.ar
	and Mix.kr.  The rate of each OpAdd UGen is set to be the fastest
	on the two input rates.

	* share/emacs/rsc.el: Write rsc-sc3server-free-all and add menu
	entry and control sequence to access this.

	* share/scheme/s/synthdef.scm: Write s/synthdef-play syntax.

	* share/scheme/s/server.scm: Write s/server-free-all procedure.

	* src/scheme/mouselocation.c: Create file and write
	mouselocation:get procedure.  This returns the mouse location on
	the root window of the default display as a zero to one normalized
	cons cell.  Moved all scheme C code to src/scheme.

	* share/scheme/i/slider.scm: Write i/slider: and rename i/slider to
	i/slider-primitive.  Deleted i/slider-set! since it is did not
	support the transform at i/slider:.

	* share/scheme/e/math.scm: Write e/quantize to quantize numbers to
	the nearest multiple of a quanta, and e/real->string to write
	truncated decimal numbers.  The latter is a workaround for lack of
	proper format or printf procedures.

2003-03-14  Rohan Drape  <rohan@henri.localdomain>

	* share/scheme/s/server.scm: Write s/server-send-message and
	s/server-send-bundle and make s/server-send select on the first
	argument.  Changed existing uses of s/server-send to
	s/server-send-message.  The send-bundle takes a time interval in
	seconds from the current time.

	* share/scheme/s/ugen-assistants.scm: Create file and write
	Klang.spec:, Klank.spec: and Mix.ar and Mix.kr.  These procedures
	are for use within SynthDef constructors, hence the
	SuperColliderNaming.Scheme.  The Env procedures are also UGen
	assistants, but have a separate file.
	
	* share/scheme/r/library.scm: Create file and write r/load-library
	procedure.  This is to encourage proper locating of source files.

	* share/scheme/m/after.scm: Create file and write m/after procedure.

